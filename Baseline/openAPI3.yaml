openapi: 3.0.0
info:
  title: Baseline API
  description: OASIS standard API specification for the Baseline Protocol
  version: v1.0.0
servers:
  - url: 'https://baseline.provide.network'
    description: Provide Baseline Operator
  - url: 'http://localhost:8080'
    description: Local Baseline Integration Stack
  - url: 'http://localhost:9999'
    description: Local BRI-1 Stack
security:
  - bearerAuth: []
  - OAuth2:
      - offline_access
      - email
tags:
  - name: .well-known
    description: /.well-known path
  - name: Authn/authz
    description: Authentication and authorization
  - name: DLT
    description: Baseline core DLT API provides interfaces for general interaction with the underlying layer 1 mainnet.
  - name: Infrastructure
    description: Distributed infrastructure API provides cloud-agnostic C2.
  - name: Oracles
  - name: Persistence
    description: Baseline core persistence provides internal integration middleware interfaces for baselining systems of record.
  - name: Privacy
    description: 'Baseline core privacy provides interfaces supporting general consistency, zero-knowledge cryptography protocols and MPC.'
  - name: Registry
    description: Baseline core registry API provides interfaces for the organization registry.
  - name: Users
    description: Baseline core users API provides interfaces for creating and authorizing users.
  - name: Vault
    description: Baseline core vault API provides interfaces for secure management of cryptographic keys and secrets.
paths:
  /accounts:
    get:
      tags:
        - DLT
      summary: List Accounts
      description: |
        Enumerates `Accounts` used for storing cryptocurrency or tokens on behalf of users managing cryptographic material (i.e., for signing transactions).
      operationId: ListAccounts
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/resultsPerPage'
      responses:
        '200':
          description: The request was successful
          headers:
            X-Total-Results-Count:
              description: Number of results
              content:
                text/plain:
                  schema:
                    type: string
                    format: number
                  example: '7'
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    post:
      tags:
        - DLT
      summary: Create Accounts
      description: |
        Creates an `Account` (also referred to as a signing identity) capable of storing cryptocurrencies and tokens native to a specific `Network`. 

        An `Account` may be setup as custodial or non-custodial, and may be derived
        from a `Wallet`. If the Account is
        custodial then the platform will sign and broadcast transactions to the
        `Network` on behalf of an authorized `User` or `Application`
      operationId: CreateAccounts
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountsRequest'
            example:
              network_id: 024ff1ef-7369-4dee-969c-1918c6edb5d4
        required: true
      responses:
        '201':
          description: The request was successful and a new entity was created
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Account'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/accounts/{id}':
    get:
      tags:
        - DLT
      summary: Get account details
      description: Retrieve details for an `Account`
      operationId: GetAccountDetails
      parameters:
        - name: id
          in: path
          description: ID of target `Account`
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/GetAccountDetails'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  /authenticate:
    post:
      tags:
        - Authn/authz
      summary: User authentication
      description: 'Email/password authentication via Ident. The presence of a `bearer` API token to required to authorize most Baseline API calls. A `bearer` API token is an encoded JWT which contains a subject claim (`sub`) which references an authorized entity (i.e., the `User`, `Application` or `Organization`). The authorized entity uses a signed `bearer` authorization Token to access one or more resources for which the Token was authorized. Unless otherwise noted, all API requests must include a header such as `Authorization: bearer <jwt>`.'
      operationId: Authentication
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication'
      deprecated: false
  /connectors:
    get:
      tags:
        - Infrastructure
      summary: List Connectors
      description: List configured `Connector` instances. Connectors are adapters that connect external arbitrary infrastructure with a baseline `Workgroup`. `Token` should be `Application` type
      operationId: ListConnectors
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/resultsPerPage'
        - $ref: '#/components/parameters/public'
      responses:
        '200':
          description: The request was successful
          headers:
            X-Total-Results-Count:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '7'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Connector'
      deprecated: false
    post:
      tags:
        - Infrastructure
      summary: Create connector
      description: Create a new `Connector` using the given configuration. `Token` should be `Application` type
      operationId: CreateConnector
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConnectorRequest'
        required: true
      responses:
        '201':
          description: The request was successful and a new entity was created
          headers:
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '854'
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Connector'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/connectors/{id}':
    get:
      tags:
        - Infrastructure
      summary: Get connector details
      description: Get `Connector` details
      operationId: GetConnectorDetails
      parameters:
        - name: id
          in: path
          description: ID of target `Connector`
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: The request was successful.
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Connector'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    delete:
      tags:
        - Infrastructure
      summary: Delete connector
      description: Deletes target connector
      operationId: deleteConnector
      parameters:
        - name: id
          in: path
          description: ID of the target connector
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '204':
          description: The request was successful but did not return a response
        '401':
          $ref: '#/components/responses/Unauthorized'
      deprecated: false
  '/connectors/{id}/load_balancers':
    get:
      tags:
        - Infrastructure
      summary: Get load balancer details
      operationId: GetLoadBalancerDetails
      parameters:
        - name: id
          in: path
          description: ID of parent `Connector`
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
          headers:
            X-Total-Results-Count:
              description: Number of results
              content:
                text/plain:
                  schema:
                    type: string
                  example: '7'
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                example:
                  - id: 64d209eb-a09d-4e2c-939e-4985a8aba70a
                    created_at: '2021-04-16T15:05:23.130Z'
                    network_id: 66d44f30-9092-4182-a3c4-bc02736d6ae5
                    workgroup_id: dc767890-0bbc-4c1d-bc04-f5842330018fs
                    name: ceeb3bca-3b92-44b9-8ac5-fdd4564
                    type: provide
                    host: ceeb3bca-3b92-44b9-8ac5-fdd4564-717022042.us-east-2.elb.amazonaws.com'
                    description: ceeb3bca-3b92-44b9-8ac5-fdd4564 - aws us-east-2
                    region: us-east-2
                    status: active
                    config:
                      api_port: 8080
                      container: providenetwork-ipfs
                      image: provide/ident
                      load_balancer_name: ceeb3bca-3b92-44b9-8ac5-fdd4564
                      load_balancer_url: ceeb3bca-3b92-44b9-8ac5-fdd4564-717022042.us-east-2.elb.amazonaws.com
                      provider_id: docker
                      region: us-east-2
                      role: peer
                      security:
                        egress: '*'
                        ingress:
                          0.0.0.0/0:
                            tcp:
                              - 8080
                            udp: []
                      target_balancer_id: '''arn:aws:elasticloadbalancing:us-east-2:192663109025:loadbalancer/app/ceeb3bca-3b92-44b9-8ac5-fdd4564/8340a112fd942e75'''
                      target_id: aws
                      target_security_group_ids:
                        - sg-009a2c35c02c1ddc0
                      vpc_id: vpc-44df352f
                items:
                  $ref: '#/components/schemas/GetLoadBalancerDetail'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  /contracts:
    get:
      tags:
        - DLT
      summary: List contracts
      description: List smart contracts visible to the authorized User or Application.
      operationId: ListContracts
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/resultsPerPage'
        - name: filter_tokens
          in: query
          description: flag to indicate if Token contracts should be filtered from the response. Default is true
          required: false
          style: form
          explode: true
          schema:
            type: boolean
        - name: sort
          in: query
          description: 'parameter to indicate how the response should be sorted; currently, recent is the only supported option and returns by accessed_at descending.'
          required: false
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
          headers:
            X-Total-Results-Count:
              description: Number of results
              content:
                text/plain:
                  schema:
                    type: string
                  example: '7'
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListContracts'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    post:
      tags:
        - DLT
      summary: Deploy contract
      description: Deploy a smart contract to the network specified
      operationId: DeployContract
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeployContractRequest'
            example:
              workgroup_id: bca2348c-442f-4c48-99a4-7b3510385e53
              network_id: ef976635-545b-46c6-9576-4e3a893a68e9
              name: Ekho
              address: 0x
              params:
                account_id: efef1044-4958-43bc-903b-28f2bb938037
                compiled_artifact:
                  contractName: Ekho
                  abi:
                    - anonymous: false
                      inputs:
                        - indexed: false
                          internalType: bytes
                          name: message
                          type: bytes
                      name: Ekho
                      type: event
                    - inputs:
                        - internalType: bytes
                          name: message
                          type: bytes
                      name: broadcast
                      outputs: []
                      stateMutability: nonpayable
                      type: function
                  bytecode: Infinity
                  source: |
                    contract Ekho {
                        event Ekho(bytes message);
                        function broadcast(bytes memory message) public {
                            emit Ekho(message);
                        }
                    }
        required: true
      responses:
        '201':
          description: The request was successful and a new entity was created
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/DeployContract'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/contracts/{id}':
    get:
      tags:
        - DLT
      summary: Get contract detail
      description: Get contract details
      operationId: GetContractDetail
      parameters:
        - name: id
          in: path
          description: ID of target contract
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
          headers:
            Date:
              description: Response timestamp
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Fri, 16 Apr 2021 15:09:45 GMT'
            X-Total-Results-Count:
              description: Number of results
              content:
                text/plain:
                  schema:
                    type: string
                  example: '7'
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/GetContractDetail'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/contracts/{id}/execute':
    post:
      tags:
        - DLT
      summary: Execute contract
      description: Construct and execute a specific method in a smart contract.
      operationId: ExecuteContract
      parameters:
        - name: id
          in: path
          description: ID of contract being executed
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteContractRequest'
            example:
              method: broadcast
              params:
                - hello world
              value: 0
              account_id: 8a1f4492-9a73-4e3d-bafe-6a3794b1320e
        required: true
      responses:
        '202':
          description: |
            The request was successfully accepted and processing will complete
            asynchronously.

            The API returns 202 Accepted if the contract execution will
            broadcast a Transaction to the network and returns a ref, which is
            an identifier you may use to ask for the execution status of the
            Transaction.
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Fri, 16 Apr 2021 15:21:28 GMT'
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                    description: Size of returned entity-body in bytes
                  example: '78'
            application/json; charset=UTF-8:
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/ExecuteContract'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  /networks:
    get:
      tags:
        - DLT
      summary: List networks
      description: List available peer-to-peer networks and related configuration details.
      operationId: ListNetworks
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/resultsPerPage'
        - $ref: '#/components/parameters/public'
      responses:
        '200':
          description: The request was successful
          headers:
            X-Total-Results-Count:
              content:
                text/plain:
                  schema:
                    type: string
                    description: Total number of results returned
                  example: '3'
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                example:
                  - id: 5d38bb6c-3700-4774-baa5-7814ac4a91e3
                    created_at: '2021-03-11T19:14:21.209Z'
                    workgroup_id: dc767890-0bbc-4c1d-bc04-f5842330018f
                    name: demo network
                    chain_id: 1615490061
                    config:
                      chain: test
                      engine_id: ethash
                      native_currency: TEST
                      network_id: 1615490061
                      platform: evm
                      protocol_id: pow
                items:
                  $ref: '#/components/schemas/ListNetworks'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    post:
      tags:
        - DLT
      summary: Create network
      description: |
        Configuring a new peer-to-peer network can be quite complex. Just how complex depends on the kind of network you intend to provision, and the clients and protocols you plan to support (both now, and in the future). Creating the configuration for a new logical network involves having deep understanding of your goals for the network and the underlying consensus and governance protocols. 

        We plan to curate some examples demonstrating how to configure extensible new EVM- and Bitcoin-based networks and will update this documentation accordingly.
      operationId: CreateNetwork
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNetworkRequest'
            example:
              name: Testnet
              cloneable: false
              config:
                native_currency: TEST
                platform: evm
                engine_id: ethash
                chain: test
                protocol_id: pow
                chainspec:
                  config:
                    homesteadBlock: 0
                    eip150Block: 0
                    eip155Block: 0
                    eip158Block: 0
                    byzantiumBlock: 0
                    constantinopleBlock: 0
                    petersburgBlock: 0
                  alloc: {}
                  coinbase: 0
                  difficulty: 131072
                  extraData: ''
                  gasLimit: 3141592
                  nonce: 66
                  mixhash: 0
                  parentHash: 0
                  timestamp: 0
        required: true
      responses:
        '201':
          description: The request was successful and a new entity was created
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Fri, 16 Apr 2021 15:21:28 GMT'
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                    description: Size of returned entity-body in bytes
                  example: '78'
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/CreateNetwork'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/networks/{id}':
    put:
      tags:
        - DLT
      summary: Update network
      description: Update a network
      operationId: UpdateNetwork
      parameters:
        - name: id
          in: path
          description: ID of the target network
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNetworkRequest'
            example:
              name: Testnet
              cloneable: false
              config:
                native_currency: TEST
                platform: evm
                engine_id: ethash
                chain: test
                protocol_id: pow
                chainspec:
                  config:
                    homesteadBlock: 0
                    eip150Block: 0
                    eip155Block: 0
                    eip158Block: 0
                    byzantiumBlock: 0
                    constantinopleBlock: 0
                    petersburgBlock: 0
                  alloc: {}
                  coinbase: 0
                  difficulty: 131072
                  extraData: ''
                  gasLimit: 3141592
                  nonce: 66
                  mixhash: 0
                  parentHash: 0
                  timestamp: 0
      responses:
        '204':
          description: The request was successful but did not return a response
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/networks/{id}/status':
    get:
      tags:
        - DLT
      summary: Get network status
      description: 'Retrieve the syncing status and, if fully-synced, real-time network-specific metrics and metadata.'
      operationId: GetNetworkStatus
      parameters:
        - name: id
          in: path
          description: ID of the target `Network`
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Fri, 16 Apr 2021 15:21:28 GMT'
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                    description: Size of returned entity-body in bytes
                  example: '78'
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/GetNetworkStatus'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  /oracles:
    get:
      tags:
        - Oracles
      summary: List Oracles
      description: Retrieve list of `Oracles`
      operationId: ListOracles
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/resultsPerPage'
      responses:
        '200':
          description: The request was successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    post:
      tags:
        - Oracles
      summary: Create Oracle
      description: Create an `Oracle`
      operationId: CreateOracle
      parameters: []
      responses:
        '200':
          description: The request was successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/oracles/{id}':
    get:
      tags:
        - Oracles
      summary: Get `Oracle` details
      description: Retrieve details on specified `Oracle`
      operationId: GetOracleDetail
      parameters:
        - name: id
          in: path
          description: ID of Oracle
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    put:
      tags:
        - Oracles
      summary: Update Oracle
      description: Update an `Oracle`
      operationId: UpdateOracle
      parameters:
        - name: id
          in: path
          description: ID of Oracle
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    delete:
      tags:
        - Oracles
      summary: Delete Oracle
      description: Delete specified `Oracle`
      operationId: DeleteOracle
      parameters:
        - name: id
          in: path
          description: ID of Oracle
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  /organizations:
    get:
      tags:
        - Registry
      summary: List organizations
      description: Retrieve a list of organizations in the authorized scope.
      operationId: ListOrganizations
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/resultsPerPage'
      responses:
        '200':
          description: The request was successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    post:
      tags:
        - Registry
      summary: Create organization
      description: Create a new organization
      operationId: CreateOrganization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationRequest'
            example:
              name: Alice Inc.
              description: Alice Incorporated.
        required: true
      responses:
        '200':
          description: The request was successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/organizations/{id}':
    get:
      tags:
        - Registry
      summary: Get organization details
      description: Get organization details
      operationId: GetOrganizationDetails
      parameters:
        - name: id
          in: path
          description: ID of Organization
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    put:
      tags:
        - Registry
      summary: Update organization details
      description: Update an organization
      operationId: UpdateOrganizationDetails
      parameters:
        - name: id
          in: path
          description: ID of Organization
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationDetailsRequest'
            example:
              name: Alice and Friends Inc.
              description: Alice and Friends Inc. Now with Friends!
        required: true
      responses:
        '200':
          description: The request was successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  /tokens:
    get:
      tags:
        - Authn/authz
      summary: List revocable tokens
      description: Retrieve a list of revocable tokens
      operationId: ListTokens
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/resultsPerPage'
      responses:
        '200':
          description: The request was successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Token'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    post:
      tags:
        - Authn/authz
      summary: Token authorization
      description: 'Authorize a Token on behalf of a `User`, `Application` or `Organization`. Returns an authorized JSON formatted JWT with an `offline-access` scoped long-term `access_token` that serves as authentication for `User`,`Organization`, and `Workgroup` related requests. To authorize a `Workgroup` token, replace `organization_id` in this example with `workgroup_id`.To authorize a `User` token, replace `organization_id` with `user_id`.'
      operationId: TokenAuthorization
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenAuthorizationRequest'
            example:
              scope: offline_access
              organization_id: cfdc122c-5c06-43e3-a478-f3d169f123a9
        required: true
      responses:
        '200':
          description: The request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/tokens/{id}':
    delete:
      tags:
        - Authn/authz
      summary: Revoke token
      description: Revoke a previously-authorized Token.
      operationId: RevokeToken
      parameters:
        - name: id
          in: path
          description: ID of target token
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  /transactions:
    get:
      tags:
        - DLT
      summary: List transactions
      description: Retrieve a list of `Transactions` scoped to the authorized `User` or `Application`
      operationId: ListTransactions
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/resultsPerPage'
        - name: filter_contract_creations
          in: query
          description: 'when true, contract creation transactions are filtered'
          required: false
          style: form
          explode: true
          schema:
            type: boolean
        - name: status
          in: query
          description: comma-delimited list of statuses by which the transactions response is filtered
          required: false
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
          headers:
            X-Total-Results-Count:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '3'
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    post:
      tags:
        - DLT
      summary: Create transaction
      description: |
        Create and broadcast a transaction in a chain- and protocol-agnostic manner.

        This API provides an asynchronous, fault-tolerant mechanism for providing some guarantees about how a well-formed transaction will become eventually-consistent with the underlying target Network. Currently, transactions are guaranteed to be successfully broadcast to the target network or timeout within 5 minutes. If a transaction is unable to be broadcast to the network for any reason (i.e., network reachability, invalid nonce etc.) it is retried every 60 seconds. It is likely these retry and timeout constraints will be made more configurable in a future release.

        In addition to the asynchronous and resilient nature of broadcasting transactions using this API, instrumentation of the full transaction lifecycle is captured for each transaction. 
      operationId: CreateTransaction
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransactionRequest'
            example:
              network_id: ef976635-545b-46c6-9576-4e3a893a68e9
              key_id: e6ef498b-589e-4514-9924-278b7bd6e3de
              to: '0xc04B5fc7c8D7d63d1b1c24dfA92a59e74859055C'
              value: 0
        required: true
      responses:
        '201':
          description: The request was successful and a new entity was created
          headers:
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                    description: Size of returned entity-body in bytes
                  example: '78'
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/CreateTransaction'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/transactions/{id}':
    get:
      tags:
        - DLT
      summary: Get transaction details
      operationId: GetTransactionDetails
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Fri, 16 Apr 2021 15:21:28 GMT'
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                    description: Size of returned entity-body in bytes
                  example: '78'
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/GetTransactionDetails'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  /users:
    get:
      tags:
        - Users
      summary: List users
      description: Retrieve a list of users in the authorized scope. A `User` may be associated with an `Application` and one or more `Organization` instances
      operationId: ListUsers
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/resultsPerPage'
      responses:
        '200':
          description: The request was successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    post:
      tags:
        - Users
      summary: Create user
      description: |-
        Create a new user

        [Privacy Policy](https://provide.services/privacy-policy)
      operationId: CreateUser
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
            example:
              first_name: Joe
              last_name: User
              email: usr@baseline.local
              password: s3cr37
        required: true
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      deprecated: false
  '/users/{id}':
    get:
      tags:
        - Users
      summary: Get user detail
      description: Retrieve detail on the target `User`
      operationId: GetUserDetail
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Fri, 16 Apr 2021 15:21:28 GMT'
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    put:
      tags:
        - Users
      summary: Update user
      description: Update target `User`
      operationId: UpdateUser
      parameters:
        - name: id
          in: path
          description: ID of target `User`
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
            example:
              email: example@email.com
              first_name: Joe
              last_name: User
              password: '12345'
        required: true
      responses:
        '200':
          description: The request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete target `User`
      operationId: DeleteUserRequest
      parameters:
        - name: id
          in: path
          description: ID of target `User`
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Target `User` deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  /unseal:
    post:
      tags:
        - Vault
      summary: Unseal vault
      description: |
        One sealing key is valid for all vaults within a single instance. The SEAL_UNSEAL_VALIDATION_HASH  environment variable contains a SHA-256 hash of the 256-bit entropy BIP39 seed phrase used for the seal/unseal key. When a valid sealing key is presented to the vault (i.e. one that has the same SHA-256 hash value as the SEAL_UNSEAL_VALIDATION_HASH environment variable), the seal/unseal key will then be cloaked (i.e., encrypted with a random, ephemeral, in-memory cloaking key) in memory and decrypted only when required for operations by the cloaking key.
      operationId: UnsealVault
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnsealVaultRequest'
            example:
              key: quantum mirror summer general keep west promote satisfy limit butter mother oyster lazy whip earn spot ticket protect mean play script peace parent intact
        required: true
      responses:
        '204':
          description: The request was successful but did not return a response
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Fri, 16 Apr 2021 15:21:28 GMT'
            X-Request-Id:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 8be81664-ef39-4be4-a55b-f60bab200a23
          content: {}
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  /vaults:
    get:
      tags:
        - Vault
      summary: List Vaults
      description: List Vaults for the authorized context.
      operationId: ListVaults
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/resultsPerPage'
      responses:
        '200':
          description: The request was successful
          headers:
            X-Request-Id:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 280cfa55-2f1e-4342-a054-f21be9b5174b
            X-Total-Results-Count:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '13'
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                example:
                  - id: 174844e9-6767-49b2-afbd-11fba1361397
                    created_at: '2021-04-13T09:32:26.607Z'
                    name: Sample Vault
                items:
                  $ref: '#/components/schemas/ListVault'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    post:
      tags:
        - Vault
      summary: Create a Vault
      description: Create a `Vault` for authorized context
      operationId: CreateVault
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVaultRequest'
            example:
              name: Test Vault
              description: Organizational keystore
        required: true
      responses:
        '201':
          description: The request was successful and a new entity was created
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Fri, 16 Apr 2021 15:21:28 GMT'
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                    description: Size of returned entity-body in bytes
                  example: '78'
            X-Request-Id:
              content:
                text/plain:
                  schema:
                    type: string
                  example: f0853058-a17a-4e0a-8ab6-ea04aa5290be
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/CreateVault'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/vaults/{id}/keys':
    get:
      tags:
        - Vault
      summary: List keys
      operationId: Listkeys
      parameters:
        - name: page
          in: query
          description: Limits resulting response to the page number specified
          required: false
          style: form
          explode: true
          schema:
            type: integer
        - name: rpp
          in: query
          description: Sets the number of results included per page
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: id
          in: path
          description: ID of target `Vault`
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Fri, 16 Apr 2021 15:21:28 GMT'
            X-Request-Id:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 948328da-277f-4fbe-90fc-e3da189c5723
            X-Total-Results-Count:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '12'
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                example:
                  - id: 02e81595-ef57-4e71-8e27-1c8b2dfdefbf
                    created_at: '2021-04-17T21:07:16.098Z'
                    vault_id: ae3c07d9-8a41-4cd3-92c0-e6358cbd516c
                    type: symmetric
                    usage: encrypt/decrypt
                    spec: ChaCha20
                    name: private chat
                    description: this is a secure channel
                items:
                  $ref: '#/components/schemas/Listkey'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    post:
      tags:
        - Vault
      summary: Create a key
      operationId: CreateaKey
      parameters:
        - name: id
          in: path
          description: ID of host `Vault`
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema: {}
            example:
              type: asymmetric
              usage: sign/verify
              spec: C25519
              name: 'c25519 key #1'
              description: c25519 key
        required: true
      responses:
        '201':
          description: The request was successful and a new entity was created
          headers:
            X-Request-Id:
              content:
                text/plain:
                  schema:
                    type: string
                  example: a62ce2be-9dda-407d-8b51-07add156b269
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/inline_response_201'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/vaults/{id}/keys/{key_id}/derive':
    post:
      tags:
        - Vault
      summary: Derive a key
      operationId: DeriveaKeyRequest
      parameters:
        - name: id
          in: path
          description: ID of host `Vault`
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: key_id
          in: path
          description: ID of `Key` for intended for derivation
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeriveaKeyRequest'
            example:
              nonce: 1
              context: channel-6852386c-8a3d-41c6-aa0e-766a31a8faaf
              name: private chat
              description: this is a secure channel
        required: true
      responses:
        '201':
          description: The request was successful and a new entity was created
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Fri, 16 Apr 2021 15:21:28 GMT'
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                    description: Size of returned entity-body in bytes
                  example: '78'
            X-Request-Id:
              content:
                text/plain:
                  schema:
                    type: string
                  example: f5d70f49-f362-4a8d-9261-3db5215bc3e6
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/DeriveaKey'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/vaults/{id}/keys/{key_id}':
    delete:
      tags:
        - Vault
      summary: Delete a key
      description: ' Delete target `Key`'
      operationId: Deleteakey
      parameters:
        - name: id
          in: path
          description: ID of host `Vault`
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: key_id
          in: path
          description: ID of target `Key`
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '204':
          description: The request was successful but did not return a response
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Sat, 17 Apr 2021 21:07:25 GMT'
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Access-Control-Allow-Credentials:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'true'
            Access-Control-Allow-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Accept, Accept-Encoding, Authorization, Cache-Control, Content-Length, Content-Type, Origin, User-Agent, X-CSRF-Token, X-Requested-With'
            Access-Control-Allow-Methods:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'GET, POST, PUT, DELETE, OPTIONS'
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '*'
            Access-Control-Expose-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: X-Total-Results-Count
            X-Request-Id:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 526088d8-0666-455f-ab39-65cbd6936f64
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/DeleteaKeyRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/vaults/{id}/secrets':
    get:
      tags:
        - Vault
      summary: List secrets
      operationId: ListSecrets
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/resultsPerPage'
        - name: id
          in: path
          description: ID of `Vault` containing `Secrets`
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
          headers:
            X-Request-Id:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 045a1bcd-5426-4cba-a93f-f8ec3ada7147
            X-Total-Results-Count:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '0'
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                example: []
                items:
                  type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    post:
      tags:
        - Vault
      summary: Store secret
      operationId: StoreSecret
      parameters:
        - name: id
          in: path
          description: ID of target `Vault`
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreSecretRequest'
            example:
              name: 'secret #1'
              type: sample secret
              description: this secret is being stored for demonstration purposes
              value: 'mysecret :D'
        required: true
      responses:
        '201':
          description: The request was successful and a new entity was created
          headers:
            X-Request-Id:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 830146c3-4af6-4a97-9cb4-63d705b4ff97
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/StoreSecret'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/vaults/{id}/secrets/{secret_id}':
    get:
      tags:
        - Vault
      summary: Retrieve secret
      operationId: RetrieveSecret
      parameters:
        - name: id
          in: path
          description: ID of `Vault` containing target `Secret`
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: secret_id
          in: path
          description: ID of target `Secret`
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
          headers:
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '317'
            X-Request-Id:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 966d1ad7-5394-496f-aa42-39ebff4e5a08
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/RetrieveSecret'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    delete:
      tags:
        - Vault
      summary: Delete secret
      operationId: DeleteSecret
      parameters:
        - name: id
          in: path
          description: ID of `Vault` containing target `Secret`
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: secret_id
          in: path
          description: ID of target `Secret`
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '204':
          description: The request was successful but did not return a response
          headers:
            X-Request-Id:
              content:
                text/plain:
                  schema:
                    type: string
                  example: bfe3cb2d-cb63-4520-94c1-529084f10db7
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/DeleteSecretRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  /wallets:
    get:
      tags:
        - DLT
      summary: List Wallets
      description: Retrieves list of `Wallet` instances
      operationId: ListWallets
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/resultsPerPage'
      responses:
        '200':
          description: The request was successful
          headers:
            X-Total-Results-Count:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '4'
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Wallet'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    post:
      tags:
        - DLT
      summary: Create Wallet
      description: |
                    Creates a `Wallet` in accordance with BIP32. A `Wallet` may be setup as custodial or non-custodial. If the Wallet is custodial then the platform will derive addresses and securely persist an `Account` for each of those derived addresses
      operationId: CreateWallet
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWalletRequest'
            example:
              purpose: 44
        required: true
      responses:
        '201':
          description: The request was successful and a new entity was created
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Wallet'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/wallets/{id}/accounts':
    get:
      tags:
        - DLT
      summary: List wallet accounts
      description: Retrieve a list of `Accounts` for a target `Wallet`
      operationId: ListWalletAccounts
      parameters:
        - $ref: '#/components/parameters/resultsPerPage'
        - name: id
          in: path
          description: Wallet ID containing accounts
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
          headers:
            X-Total-Results-Count:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '2147483648'
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                example:
                  - address: ''
                    hd_derivation_path: m/44'/60'/0'/0/0
                items:
                  $ref: '#/components/schemas/ListWalletAccount'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  /workgroups:
    get:
      tags:
        - Registry
      summary: List Workgroups
      description: Retrieve a list of `Workgroups` in the authorized scope.
      operationId: ListWorkgroups
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/resultsPerPage'
      responses:
        '200':
          description: The request was successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workgroup'
      deprecated: false
    post:
      tags:
        - Registry
      summary: Create workgroup
      operationId: CreateWorkgroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkgroupRequest'
            example:
              name: AB Workgroup
        required: true
      responses:
        '200':
          description: The request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workgroup'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/workgroups/{id}/users':
    get:
      tags:
        - Registry
      summary: List workgroup users
      description: List `Users` associated with a target `Workgroup`
      operationId: ListWorkgroupUsers
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/resultsPerPage'
        - name: id
          in: path
          description: ID of target `Workgroup`
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    post:
      tags:
        - Registry
      summary: Associate workgroup user
      description: Associates `User` to target `Workgroup`
      operationId: AssociateWorkgroupUser
      parameters:
        - name: id
          in: path
          description: ID of target workgroup
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssociateWorkgroupUserRequest'
            example:
              user_id: 93a74e83-c7bf-4ef1-b25c-1bcc35c4aee7
        required: true
      responses:
        '200':
          description: The request was successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/workgroups/{id}':
    get:
      tags:
        - Registry
      summary: Get workgroup details
      description: Retrieves details for target `Workgroup`
      operationId: GetWorkgroupDetails
      parameters:
        - name: id
          in: path
          description: ID of target `Workgroup`
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    put:
      tags:
        - Registry
      summary: Update workgroup
      description: Updates target `Workgroup`
      operationId: UpdateWorkgroup
      parameters:
        - name: id
          in: path
          description: Update target `Workgroup`
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWorkgroupRequest'
            example:
              name: ABD Workgroup
              description: Workgroup for baselining workflows. Now including Dan.
              type: Baseline
              hidden: true
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    delete:
      tags:
        - Registry
      summary: Delete workgroup
      description: Deletes target `Workgroup`
      operationId: DeleteWorkgroup
      parameters:
        - name: id
          in: path
          description: ID of target `Workgroup`
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  /business_objects:
    post:
      tags:
        - Persistence
      summary: Create Baseline business object
      description: Creates a baseline business object
      operationId: CreateBaselineBusinessObject
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBaselineBusinessObjectRequest'
            example:
              type: purchase_order
              id: '4500002427'
              payload:
                object: test
        required: true
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  baseline_id:
                    type: string
                  opcode:
                    type: string
                  identifier:
                    type: string
                  type:
                    type: string
                  payload:
                    type: object
                    properties:
                      proof:
                        type: string
                      type:
                        type: string
                      witness:
                        type: object
                        properties:
                          Document.Hash:
                            type: string
                          Document.PreImage:
                            type: string
              example:
                baseline_id: 4ea16bbd-a45e-4867-8ab0-f7e3e7e273ba
                opcode: BLINE
                identifier: b379d25f-b2fe-46fd-9a96-4d09523ef4ec
                type: purchase_order
                payload:
                  proof: 9aa07f220e52f86e78b5cb44399dd05a375413adc7a9b7ef3ae0e8b06ef0b2f2afff56a87d07cd23dad264e11a85601670aea91b3873a0475612910e72988cac0a64c540e5cccd203f80e10282cf64eaaa50883de88d771a46b9d48a55a14ca2d892365472a9c1f69c357a309f3e1b75c86c0b41f96a1b32d9af92f2ea3a00e4
                  type: purchase_order
                  witness:
                    Document.Hash: '17601414412062754957723647367357294356562802723216629399723598524672809368916'
                    Document.PreImage: '14065809565213763004053584111575847508071017910285712667024523677887390898151'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
      servers:
        - url: 'https://baseline.proxy/api/v1'
  '/business_objects/{id}':
    put:
      tags:
        - Persistence
      summary: Update Baselined business object
      description: Updates target Baselined business object
      operationId: UpdateBaselinedBusinessObject
      parameters:
        - name: id
          in: path
          description: ID of target business object
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBaselinedBusinessObjectRequest'
            example:
              type: purchase_order
              id: '4500002427'
              payload:
                hello: world
        required: true
      responses:
        '200':
          description: The request was successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
      servers:
        - url: 'https://baseline.proxy/api/v1'
  /circuits:
    get:
      tags:
        - Privacy
      summary: List circuits
      operationId: ListCircuits
      parameters:
        - name: curve
          in: query
          description: filter the response by elliptic curve
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: identifier
          in: query
          description: filter the response by identifier
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: provider
          in: query
          description: filter the response by provider
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: proving scheme
          in: query
          description: filter the response by proving scheme
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: status
          in: query
          description: filter the response by the status
          required: false
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Circuit'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    post:
      tags:
        - Privacy
      summary: Create circuit
      description: |
        'You must provision a circuit before it can be used to generate and verify proofs. The foregoing holds true regardless of which provider, proving_scheme, curve and circuit identifier you specify (or source, if the raw source code of the circuit is provided instead of an identifier).

        A powerful aspect of this API is the asynchronous nature by which computationally-intensive cryptographic operations are executed. The lifecycle of a zero-knowledge circuit depends largely on the chosen proving_scheme. For example, zkSNARK proving schemes (i.e., groth16) require a trusted setup whereas more modern schemes (i.e., plonk) do not.

        A persistent store is implicitly initialized upon the creation of a new circuit unless an existing store_id is provided and the referenced store is valid in the context of the circuit and authorized scope.Creates a circuit'
      operationId: CreateCircuit
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCircuitRequest'
            example:
              identified: cubic
              proving_scheme: groth16
              curve: BN256
              provider: gnark
              name: my 1337 circuit
        required: true
      responses:
        '200':
          description: The request was successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/circuits/{id}/prove':
    post:
      tags:
        - Privacy
      summary: Prove circuit
      description: 'Once you have provisioned a circuit, this API can be used to generate a proof given valid witness parameters. Calling this API has an implicit side-effect of writing the hash of generated proof to the persistent store associated with the circuit.'
      operationId: Prove
      parameters:
        - name: id
          in: path
          description: ID of target circuit
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProveRequest'
            example:
              identifier: cubic
              proving_scheme: groth16
              curve: BN256
              provider: gnark
              name: my 1337 circuit
        required: true
      responses:
        '200':
          description: The request was successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: 'The API returns a 422 status code and human-readable error message(s) if (i) the witness parameters is not provided, (ii) required circuit arguments (i.e., fields) are not included within the given witness parameter or (iii) when Circuit constraints are not satisfied.'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/circuits/{id}/verify':
    post:
      tags:
        - Privacy
      summary: Verify
      description: Verify a proof using the given witness parameters.
      operationId: Verify
      parameters:
        - name: id
          in: path
          description: ID of target circuit
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyRequest'
            example:
              'witness:':
                X: '3'
                'Y': '35'
              proof: 88b8d340795f4258c1f2c0ed8478b44859c90472af9ccdc5c54b02c85bcd879d9ddf3a3fb7c6926ea247c0b1c411abe2f5ba9c8deba60ab476428272767a761d1e14e343208024326429e361ebbc4c11daf5f16dbb7f7f4679cf85b17b59b1bdaa379a82ddab4dcbb7cd2bc32cdebadc6825c72d5f8e624f6d0f6b07906a8248
        required: true
      responses:
        '200':
          description: The request was successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/circuits/{id}/store/{index}':
    get:
      tags:
        - Privacy
      summary: Retrieve store value
      operationId: GetStoreValue
      parameters:
        - name: id
          in: path
          description: ID of target `Circuit`
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: index
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  /.well-known/keys:
    get:
      tags:
        - .well-known
      summary: List JWKs
      description: |-
        List JSON Web Key Sets (JWKs). 

        The JSON Web Key Set (JWKS) is a set of keys containing the public keys used to verify any JSON Web Token (JWT) issued by the authorization server and signed using the RS256 signing algorithm.

        When creating applications and APIs in Auth0, two algorithms are supported for signing JWTs: RS256 and HS256. RS256 generates an asymmetric signature, which means a private key must be used to sign the JWT and a different public key must be used to verify the signature.

        Auth0 uses the JSON Web Key (JWK) specification to represent the cryptographic keys used for signing RS256 tokens. This specification defines two high-level data structures: JSON Web Key (JWK) and JSON Web Key Set (JWKS).

        This endpoint will contain the JWK used to sign all Auth0-issued JWTs for this tenant.
      operationId: ListWellKnownKeys
      parameters: []
      responses:
        '200':
          description: The request was successful
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                example:
                  - kid: 'c5:eb:8d:59:44:38:63:06:c9:d3:e4:97:08:fb:68:9c'
                    'n': '995527063618956193410833036962507246986474398054602179908260487445806246489215766039251752652683534248392227323379449531373094174748653054997706465668689972252213093587018180990218764975713772974100211316813863025129179630019623482456703746731298216105196239902672165546333004057492239784978826286556220816776336241042696753088894672303989781706643733233579846968753349402992192452275172979617296256431304053528963070154587755597334718471566532697695566806848739816890462413410326248045976990042651171835110004317895064969114765347902086739148556954319383964003317643357488047800335770372072590234276602697951534723513814120780494254368686116204741180163099781052651805841038832515887268451518717672650541960189952548208271063651390926536783230127645827697776323106258247121628807721231425504345976051589179188919820510476741228874102006646132604055010539746291533048142740994895058566847763900593989114102754149269150841200709200458437074129362211966398371438300510481258132560736028943646699639829561555724431474507308017460343637655844991892817988961745641951250027197531503911248482778035085865533953601104790476037915508823689020619850341247576271568925023930116394277127637893466936882893442420321634189068402675796649097631203'
                    e: '10001'
                    fingerprint: 'e6:f7:d5:24:e2:59:06:2b:bc:a2:8c:35:9d:ca:0a:87'
                    public_key: '861483997211088567986679229181848054089604638641344651799629411219132348016278717092102128681135611380326752098936363353495444063202162029673523557773782048024114883574432634108045249947154852742644555192210297230097245140428848581230277818343146223559594512475826760838877076266154044960265352746066723631764046840316942987769580553619014590812187691295364700040641787500269269399045832588373172593121687203191684140294108378584755314277325012894787853550357182542202120051794903430593790088728831567724495129050530806677080541218084315114228795876927064009879284573531870815708443412933965416303038891773876363479243549734042137128368669274726190909529704641365251977820965336530028317042370318858190049737976730950424571654404303776058323774989878709454832673621703315168343354939050427851085442751220892330674377060840075089494965206267742175926300979682121686578985916424314967542319047670046306072654213458712385294663342927553785567808885434950558955088305721767631170042743815215456801539616413473452207339467426842177647739317764485798830023496667390636938833319855298970928615645190825794520784096740427440910286686264656276871411041902304833534185654554399301291984087480695247759311118167876962745932311927957101815475731'
                items:
                  $ref: '#/components/schemas/ListWellKnownKeys'
  /.well-known/openid-configuration:
    get:
      tags:
        - .well-known
      summary: Fetch OpenID configuration
      description: |-
        Retrieve secret OpenID configuration. 

        Openid-configuration is a Well-known URI Discovery Mechanism for the Provider Configuration URI and is defined in OpenID Connect.

        Openid-configuration is a URI defined within OpenID Connect which provides configuration information about the Identity Provider (IDP).

        Openid-configuration is the OpenID Connect Provider's discovery document. The discovery document describes the provider's API endpoints used during the authentication sequence. Specifying this URL connects the authenticator to a particular OpenID Connect Provider. For Example, for Google (including Google Apps), the discovery document URL

        The Openid-configuration publishes a JSON object listing the Provider's OAuth 2.0 / OpenID Connect Endpoints as well as the supported grants, response types, authentication methods and security algorithms. These details are needed by clients and application developers to construct requests to the server.
      operationId: ListOpenIDConfiguration
      parameters: []
      responses:
        '200':
          description: The request was successful
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/OpenIdConfig'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
components:
  schemas:
    Vault:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Identifier for a specific `Vault` instance. UUID as specified by RFC4122
        created_at:
          type: string
          format: date-time
          description: Date and time of `Vault` creation
        name:
          type: string
          description: User-defined identifier for a specific `Vault` instance.
        description:
          type: string
          description: User-defined summary of a specific `Vault`  instance
    Transaction:
      type: object
      properties:
        id:
          type: string
          format: UUID
          description: Identifier for a specific `Transaction`. UUID as specified by RFC4122
        created_at:
          type: string
          format: date-time
          description: Date and time of `Transaction` creation
        network_id:
          type: string
          format: uuid
          description: Identifier for the host `Network`. UUID as specified by RFC4122
        user_id:
          type: string
          format: uuid
          description: Identifier for the `User` that created a `Vault`. UUID as specific by RFC4122
        wallet_id:
          type: string
          format: uuid
          description: Identifier for the `Wallet` that created a `Vault`. UUID as specific by RFC4122
        hd_derivation_path:
          type: string
        to:
          type: string
        value:
          type: number
        data:
          type: object
          nullable: true
        hash:
          type: string
        status:
          type: string
        ref:
          type: object
          nullable: true
        description:
          type: object
          nullable: true
        block:
          type: number
        block_timestamp:
          type: string
        finalized_at:
          type: string
      example:
        id: 99a61ee5-73ea-46d1-a434-b6a2a908bc51
        created_at: '2021-04-21T02:12:11.158372Z'
        network_id: 66d44f30-9092-4182-a3c4-bc02736d6ae5
        user_id: 7c8fe6f1-38c3-4da1-b4b7-7591c6d0ca7c
        wallet_id: 0fda2f96-d957-4f65-9e92-fa5092c51751
        hd_derivation_path: m/44'/60'/0'/0/0
        to: 7c8fe6f1-38c3-4da1-b4b7-7591c6d0ca7c
        value: 0
        data: null
        hash: '0xd3cceb291c37f6bfae5da76d10a6233833bac8c64f856409d791ae5e4316b169'
        status: success
        ref: null
        description: null
        block: '10079406'
        block_timestamp: '2021-04-21T02:12:05Z'
        finalized_at: '2021-04-21T02:12:14.277878Z'
    Circuit:
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
        vault_id:
          type: string
        proving_key_id:
          type: object
        verifying_key_id:
          type: object
        name:
          type: string
        description:
          type: object
        identifier:
          type: string
        provider:
          type: string
        proving_scheme:
          type: string
        curve:
          type: string
        status:
          type: string
        store_id:
          type: string
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
    CreateWorkgroupRequest:
      title: Create workgroup request
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: Name of `Workgroup` being created
      example:
        name: AB Group
    AssociateWorkgroupUserRequest:
      title: Associate workgroup user request
      required:
        - user_id
      type: object
      properties:
        user_id:
          type: string
          description: ID of `User` to be associated with `Workgroup`
      example:
        user_id: 93a74e83-c7bf-4ef1-b25c-1bcc35c4aee7
    UpdateWorkgroupRequest:
      title: Update Workgroup Request
      type: object
      properties:
        name:
          type: string
          description: New name of target `Workgroup`
        description:
          type: string
          description: New description of target `Workgroup`
        type:
          type: string
          description: New `Type` of target 'Workgroup'
          enum:
            - Baseline
        hidden:
          type: boolean
          description: 'If `true`, sets target `Workgroup` to hidden'
      example:
        name: Updated Workgroup
        description: Description of updated `Workgroup`
        type: Baseline
        hidden: true
    CreateOrganizationRequest:
      title: Create organization request
      required:
        - description
        - name
      type: object
      properties:
        name:
          type: string
          description: Name of `Organization` being created
        description:
          type: string
          description: Description of `Organization` being created
      example:
        name: test_org
        description: organization for testing
    UpdateOrganizationDetailsRequest:
      title: Update organization details request
      type: object
      properties:
        name:
          type: string
          description: Updated name of target `Organization`
        description:
          type: string
          description: Updated description of target `Organization`
      example:
        name: updated org name
        description: updated description
    RevocableToken:
      title: RevocableToken
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
        token:
          type: string
    Token:
      title: Token
      type: object
      properties:
        id:
          type: string
          description: ID of `Token` issued
        expires_in:
          type: number
          description: Time in minutes until `Token` will no longer be valid
        token:
          type: string
          format: password
          description: JSON formatted Web Token
        permissions:
          type: number
          description: Authorized privileges for `Token`
      example:
        id: g2n0920a-13ab-4d88-a1cc-e9e65460bfb9
        expires_in: 86400
        token: eypFadcQniJSUzI1NiIsImtpDPL6ImM1OmViOjhkOjU5OjP0OjM4OjYzOjA2OmM5OmQzOmU0Ojk3OjA4OmZiOjY4OjljIiwidHlwIjoiSldUIn0.eyJhdWQrOiJodHRwczovL2lkZW50LnByb3ZpZGUuc2VydmljZXMvYXBpL3YxIiwiZXhwIjoxNjIyMTc5MDg4LCJpYXQiOjE2MjIwOTI2ODgsImlzcyI6Imh0dHBzOi8vaWRlbnQucHJvdmlkZS5zZXJ2aWNlcyIsImp0aSI6ImYxYTM5MjBhLTEzYWItNGQ4OC1hMGNjLWU5ZTY1NDYwYWZiOSIsIm5hdHMiOnsicGVybWlzc2lvbnMiOnsicHVibGlzaCI6eyJhbGxvdyI6WyJiYXNlbGluZS5cdTAwM2UiXX0sInN1YnNjcmliZSI6eyJhbGxvdyI6WyJ1c2VyLjdjOGZlNmYxLTM4YzMtNGRhMS1iNGI3LTc1OTFjNmQwY2E3YyIsIm5ldHdvcmsuKi5jb25uZWN0b3IuKiIsIm5ldHdvcmsuKi5zdGF0dXMiLCJwbGF0Zm9ybS5cdTAwM2UiLCJiYXNlbGluZS5cdTAwM2UiXX19fSwicHJ2ZCI6eyJwZXJtaXNzaW9ucyI6MTA0ODk5MSwidXNlcl9pZCI6IjdjOGZlNmYxLTM4YzMtNGRhMS1iNGI3LTc1OTFjNmQwY2E3YyJ9LCJzdWIiOiJ1c2VyOjdjOGZlNmYxLTM4YzMtNGRhMS1iNGI3LTc1OTFjNmQwY2E3YyJ9.KK_hmCs92exbrcNz5njG1Np6dumYq7xULAgmf-mTxsVjZJbTPK2zzYNwwI6IEM4ocIxm-sGnZfPV-dsnlI0_Fl_9pKwhaRM0vyCm7xQ2koJ0EYfqy8gYOI2c1isjWSZYXvoeUPgLCiA76Xq_qod3Mhb_PsixOFk5zRZHicQZWUUN5ksNBfSHaKqXPC1sFQyQtL2WXDTPXu2TOyMOmT7_M8pXX48VRd16thJRC77GMiFkSdNQpERrTuiKykecB8-TA9J1DcYYXiWU_tKwurOayNq2tYzDw61BP6LaXYHYBG1fg--d4I79RToJnSYybkC-7fQetvUQMbQyxyQog8feFBNGRX2AvaYMknlEOuD72HEqxqWvIo0tRLjPuV85o3FCTKZHcHVPhLRQ8PDSXd2WWlKHAHUueH-OOhWtxRfFCE5VMDo5tnymtwOgGRnjld2Eqgfv_0MOcSrntxkEy3o0YMLOHRSm2liiMLpVHEd3DTAccr805z9bG2PF4iKLfZrEOgsLRo_aS6lyooDZfNh66odwCMB2-ZoOQXplxn1w5dJGBeSAZ3NWqcUGfqiVUZln2AfZ1VATk-N8m8pcSJL2toq15PcbpCmzFr2jYjdSQzP3De_oGH7BedE5gkcs_cK8MmDUbXrwoRDZqy5s6CgJuso9Gu0cEBH0MnM3GwqAG6Q
        permissions: 415
    Authentication:
      title: Authentication
      type: object
      properties:
        user:
          type: object
          properties:
            schema:
              $ref: '#/components/schemas/User'
        token:
          type: object
          properties:
            schema:
              $ref: '#/components/schemas/Token'
    Authorization:
      title: Authorization
      type: object
      properties:
        id:
          type: string
        access_token:
          type: string
        refresh_token:
          type: string
        expires_in:
          type: number
        scope:
          type: string
        permissions:
          type: number
    TokenAuthorizationRequest:
      title: Token authorization
      required:
        - scope
      type: object
      properties:
        scope:
          type: string
          description: Scope of authorization request
          enum:
            - offline_access
        organization_id:
          type: string
          description: ID of `Organization` being authorized
      example:
        scope: offline_access
        organization_id: cfdc122c-5c06-43e3-a478-f3d169f123a9
    AuthenticationRequest:
      title: Authentication request
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: Email of User to be authenticated
        password:
          type: string
          description: Password of User to be authenticated
      example:
        email: joeusr@baseline.local
        password: s3cr37
    CreateUserRequest:
      title: Create user request
      required:
        - email
        - first_name
        - last_name
      type: object
      properties:
        email:
          type: string
          description: Email address of `User` being created
        first_name:
          type: string
          description: First name of `User` being created
        last_name:
          type: string
          description: Last name of `User` being created
        password:
          type: string
          description: Password for `User` being created; leave blank to create a virtual `User`
      example:
        email: joeusr@baseline.local
        first_name: Joe
        last_name: Usr
        password: s3cr37
    UpdateUserRequest:
      title: Update user request
      type: object
      properties:
        email:
          type: string
          description: New email of target `User`
        first_name:
          type: string
          description: New first name of target `User`
        last_name:
          type: string
          description: New last name of target `User`
        password:
          type: string
          description: New password of target `User`
      example:
        email: joeusr@baseline.local
        first_name: Joe
        last_name: Usr
        password: '12345'
    ListConnectors:
      title: List connector
      required:
        - config
        - created_at
        - description
        - id
        - name
        - network_id
        - organization_id
        - status
        - type
        - workgroup_id
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
        workgroup_id:
          type: string
        network_id:
          type: string
        organization_id:
          type: string
          nullable: true
        name:
          type: string
        type:
          type: string
        status:
          type: string
        description:
          type: string
          nullable: true
        config:
          $ref: '#/components/schemas/Config'
      example:
        id: d3f26699-cc7d-4cff-867b-2996020332bf
        created_at: '2021-03-11T19:15:58.710+0000'
        workgroup_id: dc767890-0bbc-4c1d-bc04-f5842330018f
        network_id: 66d44f30-9092-4182-a3c4-bc02736d6ae5
        name: demoIPFS
        type: ipfs
        status: deprovisioning
        config:
          container: providenetwork-ipfs
          gateway_port: 8080
          provider_id: docker
          region: us-east-1
          role: peer
          rpc_port: 5001
          security:
            egress: '*'
            ingress:
              0.0.0.0/0:
                tcp:
                  - 5001
                  - 8080
                udp: []
          target_id: aws
    Config:
      title: Config
      required:
        - container
        - provider_id
        - region
        - role
        - security
        - target_id
      type: object
      properties:
        container:
          type: string
        gateway_port:
          type: integer
          format: int32
        provider_id:
          type: string
        region:
          type: string
        role:
          type: string
        rpc_port:
          type: integer
          format: int32
        security:
          $ref: '#/components/schemas/Security'
        target_id:
          type: string
        api_port:
          type: integer
          format: int32
        api_url:
          type: string
        image:
          type: string
      example:
        container: providenetwork-ipfs
        gateway_port: 8080
        provider_id: docker
        region: us-east-1
        role: peer
        rpc_port: 5001
        security:
          egress: '*'
          ingress:
            0.0.0.0/0:
              tcp:
                - 5001
                - 8080
              udp: []
        target_id: aws
    Security:
      title: Security
      required:
        - egress
        - ingress
      type: object
      properties:
        egress:
          type: string
        ingress: {}
      example:
        egress: '*'
        ingress:
          0.0.0.0/0:
            tcp:
              - 5001
              - 8080
            udp: []
    Ingress:
      title: Ingress
      required:
        - 0.0.0.0/0
      type: object
      properties:
        0.0.0.0/0: {}
      example:
        0.0.0.0/0:
          tcp:
            - 5001
            - 8080
          udp: []
    CreateConnectorRequest:
      title: Create connector request
      required:
        - config
        - name
        - network_id
        - type
      type: object
      properties:
        name:
          type: string
          description: Name of new `Connector`
        network_id:
          type: string
          description: ID of host `Network` for new `Connector`
        type:
          type: string
          description: Type of new `Connector`
      example:
        name: Sample Connector
        network_id: aa51a87f-f142-4341-8e94-b4b0214a009f
        type: provide
        config:
          region: us-east-2
          target_id: aws
          provider_id: docker
          role: peer
          container: providenetwork-ipfs
          credentials:
            aws_access_key_id: '{{aws_access_key_id}}'
            aws_secret_access_key: '{{aws_secret_key}}'
          image: provide/ident
          api_port: 8080
          security:
            egress: '*'
            ingress:
              0.0.0.0/0:
                tcp:
                  - 8080
                udp: []
      description: ''
      x-examples:
        example-1:
          name: Sample Connector
          network_id: aa51a87f-f142-4341-8e94-b4b0214a009f
          type: provide
          config:
            region: us-east-2
            target_id: aws
            provider_id: docker
            role: peer
            container: providenetwork-ipfs
            credentials:
              aws_access_key_id: '{{aws_access_key_id}}'
              aws_secret_access_key: '{{aws_secret_key}}'
            image: provide/ident
            api_port: 8080
            security:
              egress: '*'
              ingress:
                0.0.0.0/0:
                  tcp:
                    - 8080
                  udp: []
    Credentials:
      title: Credentials
      required:
        - aws_access_key_id
        - aws_secret_access_key
      type: object
      properties:
        aws_access_key_id:
          type: string
          format: password
        aws_secret_access_key:
          type: string
          format: password
      example:
        aws_access_key_id: '{{aws_access_key_id}}'
        aws_secret_access_key: '{{aws_secret_key}}'
    Connector:
      title: Connector
      required:
        - config
        - created_at
        - description
        - id
        - names
        - network_id
        - organization_id
        - status
        - type
        - workgroup_id
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Identifier for the referenced `Connector`. Expressed as a UUID as specified by RFC4122.
        created_at:
          type: string
          description: Timestamp of `Connector` creation expressed as a Unix timestamp
        workgroup_id:
          type: string
          format: uuid
          description: UUID of connected `Workgroup`
        network_id:
          type: string
          format: uuid
          description: UUID of host `Network`
        organization_id:
          type: string
          format: uuid
          nullable: true
          description: UUID of connected `Organization`
        name:
          type: string
          description: User-defined name of `Connector`
          nullable: true
        type:
          type: string
          description: ''
        status:
          type: string
        description:
          type: string
          nullable: true
          description: User-defined descriptor of the reference `Connector`
      example:
        id: dfec9cb2-e655-4d6d-b4fe-35fb6c6af7a0
        created_at: '2021-04-16T15:05:23.107Z'
        workgroup_id: dc767890-0bbc-4c1d-bc04-f5842330018f
        network_id: 66d44f30-9092-4182-a3c4-bc02736d6ae5
        name: Sample Connector
        type: provide
        status: provisioning
        config:
          api_port: 8080
          api_url: |
            'https://ceeb3bca-3b92-44b9-8ac5-fdd4564-717022042.us-east-2.elb.amazonaws.com:8080'
          container: providenetwork-ipfs
          image: provide/ident
          provider_id: docker
          region: us-east-2
          role: peer
          security:
            egress: '*'
            ingress:
              0.0.0.0/0:
                tcp:
                  - 8080
                udp: []
          target_id: aws
    GetLoadBalancerDetail:
      title: Get load balancer detail
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
        network_id:
          type: string
        workgroup_id:
          type: string
        name:
          type: string
        type:
          type: string
        host:
          type: string
        ipv4:
          type: string
          nullable: true
        ipv6:
          type: string
          nullable: true
        description:
          type: string
        region:
          type: string
        status:
          type: string
      example:
        id: 64d209eb-a09d-4e2c-939e-4985a8aba70a
        created_at: '2021-04-16T15:05:23.130Z'
        network_id: 66d44f30-9092-4182-a3c4-bc02736d6ae5
        workgroup_id: dc767890-0bbc-4c1d-bc04-f5842330018f
        name: ceeb3bca-3b92-44b9-8ac5-fdd4564
        type: provide
        host: ceeb3bca-3b92-44b9-8ac5-fdd4564-717022042.us-east-2.elb.amazonaws.com
        description: ceeb3bca-3b92-44b9-8ac5-fdd4564 - aws us-east-2
        region: us-east-2
        status: active
        config:
          api_port: 8080
          container: providenetwork-ipfs
          image: provide/ident
          load_balancer_name: ceeb3bca-3b92-44b9-8ac5-fdd4564
          load_balancer_url: ceeb3bca-3b92-44b9-8ac5-fdd4564-717022042.us-east-2.elb.amazonaws.com
          provider_id: docker
          region: us-east-2
          role: peer
          security:
            egress: '*'
            ingress:
              0.0.0.0/0:
                tcp:
                  - 8080
                udp: []
          target_balancer_id: '''arn:aws:elasticloadbalancing:us-east-2:192663109025:loadbalancer/app/ceeb3bca-3b92-44b9-8ac5-fdd4564/8340a112fd942e75'''
          target_id: aws
          target_security_group_ids:
            - sg-009a2c35c02c1ddc0
          vpc_id: vpc-44df352f
    ListNetworks:
      title: List networks
      required:
        - chain_id
        - config
        - created_at
        - description
        - enabled
        - id
        - name
        - workgroup_id
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
        workgroup_id:
          type: string
        name:
          type: string
        description:
          type: string
          nullable: true
        enabled:
          type: string
          nullable: true
        chain_id:
          type: string
      example:
        id: 5d38bb6c-3700-4774-baa5-7814ac4a91e3
        created_at: '2021-03-11T19:14:21.209Z'
        workgroup_id: dc767890-0bbc-4c1d-bc04-f5842330018f
        name: demo network
        chain_id: 1615490061
        config:
          chain: test
          engine_id: ethash
          native_currency: TEST
          network_id: 1615490061
          platform: evm
          protocol_id: pow
    GetNetworkStatus:
      title: Get network status
      required:
        - block
        - chain_id
        - last_block_at
        - meta
      type: object
      properties:
        block:
          type: integer
          format: int32
        chain_id:
          type: string
        last_block_at:
          type: integer
          format: int64
      example:
        block: 10051293
        chain_id: '3'
        last_block_at: 1618585516000
        meta:
          average_blocktime: 16.857142857142858
          blocktimes:
            - 55
            - 24
            - 8
            - 1
            - 3
            - 20
            - 7
          last_block_hash: 9.989223476220849e+76
          last_block_header:
            difficulty: 332684640
            extraData: 2.0546142296616173e+55
            gasLimit: 8000000
            gasUsed: 4239743
            hash: 9.989223476220849e+76
            logsBloom: Infinity
            miner: 8.48426420734598e+47
            mixHash: 5.7466973338902615e+76
            nonce: 3690028544043842600
            number: 10051293
            parentHash: 1.1505648856095058e+77
            receiptsRoot: 8.908601046542534e+76
            sha3Uncles: 1.3478047122767187e+76
            stateRoot: 9.003758650035363e+76
            timestamp: 1618585516
            transactionsRoot: 1.1135174226771815e+77
    LastBlockHeader:
      title: LastBlockHeader
      required:
        - difficulty
        - extraData
        - gasLimit
        - gasUsed
        - hash
        - logsBloom
        - miner
        - mixHash
        - nonce
        - number
        - parentHash
        - receiptsRoot
        - sha3Uncles
        - stateRoot
        - timestamp
        - transactionsRoot
      type: object
      properties:
        difficulty:
          type: string
        extraData:
          type: string
        gasLimit:
          type: string
        gasUsed:
          type: string
        hash:
          type: string
        logsBloom:
          type: string
        miner:
          type: string
        mixHash:
          type: string
        nonce:
          type: string
        number:
          type: string
        parentHash:
          type: string
        receiptsRoot:
          type: string
        sha3Uncles:
          type: string
        stateRoot:
          type: string
        timestamp:
          type: string
        transactionsRoot:
          type: string
      example:
        difficulty: 332684640
        extraData: 2.0546142296616173e+55
        gasLimit: 8000000
        gasUsed: 4239743
        hash: 9.989223476220849e+76
        logsBloom: Infinity
        miner: 8.48426420734598e+47
        mixHash: 5.7466973338902615e+76
        nonce: 3690028544043842600
        number: 10051293
        parentHash: 1.1505648856095058e+77
        receiptsRoot: 8.908601046542534e+76
        sha3Uncles: 1.3478047122767187e+76
        stateRoot: 9.003758650035363e+76
        timestamp: 1618585516
        transactionsRoot: 1.1135174226771815e+77
    CreateNetworkRequest:
      title: Create network request
      required:
        - cloneable
        - config
        - name
      type: object
      properties:
        name:
          type: string
          description: Name of `Network` to be created
        cloneable:
          type: boolean
          description: 'If `true`, `Network` can be cloned'
        config: {}
      example:
        name: Sample Testnet
        cloneable: false
        config:
          native_currency: TEST
          platform: evm
          engine_id: ethash
          chain: test
          protocol_id: pow
          chainspec:
            config:
              homesteadBlock: 0
              eip150Block: 0
              eip155Block: 0
              eip158Block: 0
              byzantiumBlock: 0
              constantinopleBlock: 0
              petersburgBlock: 0
            alloc: {}
            coinbase: 0
            difficulty: 131072
            extraData: ''
            gasLimit: 3141592
            nonce: 66
            mixhash: 0
            parentHash: 0
            timestamp: 0
    ChainSpec:
      title: Chainspec
      required:
        - alloc
        - coinbase
        - config
        - difficulty
        - extraData
        - gasLimit
        - mixhash
        - nonce
        - parentHash
        - timestamp
      type: object
      properties:
        config: {}
        alloc:
          type: object
        coinbase:
          type: string
        difficulty:
          type: string
        extraData:
          type: string
        gasLimit:
          type: string
        nonce:
          type: string
        mixhash:
          type: string
        parentHash:
          type: string
        timestamp:
          type: string
      example:
        config:
          homesteadBlock: 0
          eip150Block: 0
          eip155Block: 0
          eip158Block: 0
          byzantiumBlock: 0
          constantinopleBlock: 0
          petersburgBlock: 0
        alloc: {}
        coinbase: 0
        difficulty: 131072
        extraData: ''
        gasLimit: 3141592
        nonce: 66
        mixhash: 0
        parentHash: 0
        timestamp: 0
    CreateNetwork:
      title: Create network
      required:
        - chain_id
        - config
        - created_at
        - description
        - enabled
        - id
        - name
        - workgroup_id
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
        workgroup_id:
          type: string
        name:
          type: string
        description:
          type: string
          nullable: true
        enabled:
          type: boolean
        chain_id:
          type: string
        config: {}
      example:
        id: 2461556c-25ab-4c49-80e7-8d4733e0231b
        created_at: '2021-04-16T15:07:01.962+0000'
        workgroup_id: dc767890-0bbc-4c1d-bc04-f5842330018f
        name: Sample Testnet
        enabled: true
        chain_id: 1618585621
        config:
          chain: test
          chainspec:
            alloc: {}
            coinbase: 0
            config:
              byzantiumBlock: 0
              constantinopleBlock: 0
              eip150Block: 0
              eip155Block: 0
              eip158Block: 0
              homesteadBlock: 0
              petersburgBlock: 0
            difficulty: 131072
            extraData: ''
            gasLimit: 3141592
            mixhash: 0
            nonce: 66
            parentHash: 0
            timestamp: 0
          engine_id: ethash
          native_currency: TEST
          network_id: 1618585621
          platform: evm
          protocol_id: pow
    CreateAccountsRequest:
      title: Create accounts request
      required:
        - network_id
      type: object
      properties:
        network_id:
          type: string
          description: ID of the `Network` in which the `Account` is to be created
      example:
        network_id: 66d44f30-9092-4182-a3c4-bc02736d6ae5
    CreateAccounts:
      title: Create accounts
      required:
        - address
        - created_at
        - id
        - key_id
        - network_id
        - public_key
        - user_id
        - vault_id
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
        network_id:
          type: string
          description: ID of the host `Network`
        user_id:
          type: string
        vault_id:
          type: string
        key_id:
          type: string
        public_key:
          type: string
        address:
          type: string
      example:
        id: 30ff7e74-b870-449e-b41d-e508487f7faf
        created_at: '2021-04-16T15:09:37.072Z'
        network_id: 66d44f30-9092-4182-a3c4-bc02736d6ae5
        user_id: 7c8fe6f1-38c3-4da1-b4b7-7591c6d0ca7c
        vault_id: 190822c9-62f5-4caf-a419-df735a793b2f
        key_id: cb8e5646-8968-4b10-ab5f-b3aea233a11c
        public_key: 0x055c95n123456f3216eaeba7d165a1ff1287d04b90d0c8be02fb1e18d26406484a52a5b0dcf49498ae09e0d097024124fc2849655c344edf62bdb8478f2d9a8bcb
        address: '0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B'
    Account:
      title: Account
      type: object
      example:
        id: 30ff7e74-b870-449e-b41d-e508487f7faf
        created_at: '2021-04-16T15:09:37.072Z'
        network_id: 66d44f30-9092-4182-a3c4-bc02736d6ae5
        user_id: 7c8fe6f1-38c3-4da1-b4b7-7591c6d0ca7c
        vault_id: 190822c9-62f5-4caf-a419-df735a793b2f
        key_id: cb8e5646-8968-4b10-ab5f-b3aea233a11c
        public_key: 0x055c95n123456f3216eaeba7d165a1ff1287d04b90d0c8be02fb1e18d26406484a52a5b0dcf49498ae09e0d097024124fc2849655c344edf62bdb8478f2d9a8bcb
        address: '0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B'
      properties:
        id:
          type: string
          format: uuid
          description: Identifier for the referenced `Account`. Expressed as a UUID as specified by RFC4122.
          example: 79e02922-0053-4749-8c98-2d4f293e71d5
        created_at:
          type: string
          description: Timestamp of `Account` creation
          format: date-time
          example: '2021-05-25T04:40:45.173333Z'
        network_id:
          type: string
          description: ID of host `Network`
          format: uuid
          example: 07102258-5e49-480e-86af-6d0c3260827d
        user_id:
          type: string
          description: ID of `User` that created the `Account`
          example: 7c8fe6f1-38c3-4da1-b4b7-7591c6d0ca7c
          format: uuid
        vault_id:
          type: string
          description: ID of the `Vault` that houses `Account` key
          format: uuid
          example: 190822c9-62f5-4caf-a419-df735a793b2f
        key_id:
          type: string
          description: ID of the `Key` used to sign the `Account`
          format: uuid
          example: c53f0a88-898b-4e80-a846-9ea8c9748263
        public_key:
          type: string
          description: Public key of the `Account`
          example: '0x0499d7a24f111c0e54050b0c26af485effe0fcf2b5c4dca2872846f2ffd20da94f83195ff62af17990ad9d6c5a10bc4b6fa72b3f564a88a50e2314f8a8c1c26ec4'
        address:
          type: string
          description: Address of the `Account`
          example: '0x2F80683f2cf2E00254dD0B89A64Bc3bF290180a6'
      required:
        - id
      x-examples:
        Sample Account object:
          id: 30ff7e74-b870-449e-b41d-e508487f7faf
          created_at: '2021-04-16T15:09:37.072Z'
          network_id: 66d44f30-9092-4182-a3c4-bc02736d6ae5
          user_id: 7c8fe6f1-38c3-4da1-b4b7-7591c6d0ca7c
          vault_id: 190822c9-62f5-4caf-a419-df735a793b2f
          key_id: cb8e5646-8968-4b10-ab5f-b3aea233a11c
          public_key: 0x055c95n123456f3216eaeba7d165a1ff1287d04b90d0c8be02fb1e18d26406484a52a5b0dcf49498ae09e0d097024124fc2849655c344edf62bdb8478f2d9a8bcb
          address: '0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B'
      description: Typical `Account` object reponse
    GetAccountDetails:
      title: Get account details
      description: Retrieve details for an account
      required:
        - id
      type: object
      properties:
        schema:
          $ref: '#/components/schemas/Account'
          balance:
            type: integer
            format: int32
      example:
        id: efef1044-4958-43bc-903b-28f2bb938037
        created_at: '2018-10-03T20:48:03.24878Z'
        application_id: e49302c5-e485-4e14-9b0f-db5643b6a15c
        user_id: 'null'
        network_id: 024ff1ef-7369-4dee-969c-1918c6edb5d4
        address: '0xAC805F1c2Bf9a19b448bc207075B992Be29bC91a'
        balance: '0'
        accessed_at: '2018-10-03T20:48:37.291739Z'
    Wallet:
      title: Wallet
      description: hierarchical deterministic (HD) wallet in accordance with BIP44
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Identifier for a unique `Wallet`. Expressed as a UUID as specified by RFC4122.
        created_at:
          type: string
          description: Date and time of `Wallet` creation. Expressed
        user_id:
          type: string
          description: Identifier for the unique `User` that created a `Wallet`. Expressed as a UUID as specified by RFC4122.
        vault_id:
          type: string
          format: uuid
          description: Identifier for the unique `Vault` that created a `Wallet`. Expressed as a UUID as specified by RFC4122.
        key_id:
          type: string
          format: uuid
          description: ID of private key used to create `Wallet`
        purpose:
          type: integer
          format: int32
          description: Purpose is a constant set to 44' (or 0x8000002C) following the BIP43 recommendation. It indicates that the subtree of this node is used according to this specification. Hardened derivation is used at this level.
        public_key:
          type: string
          description: Public signing key of `Wallet`
      example:
        id: bbc1195e-d131-4b2f-b1a8-1b6f34b55d3e
        created_at: '2021-03-30T02:50:17.155Z'
        user_id: 7c8fe6f1-38c3-4da1-b4b7-7591c6d0ca7c
        vault_id: 190822c9-62f5-4caf-a419-df735a793b2f
        key_id: db9e6e21-23b0-497d-a02c-8a8813f8bf2d
        purpose: 44
        public_key: xpub661MyMwAqRbcGdYXwwnwcnrH51AxyF3kkTeEt6iZfNDXsg4MLPgV7bEZ2v4uCx9djAboy6vSv3VbHPc6hf4Do8wb7FpJCuG7aMBwH2QgLJu
    OpenIdConfig:
      title: OpenIdConfig
      type: object
      properties:
        authorization_endpoint:
          type: string
        claims_supported:
          type: array
          items:
            type: string
        cloud_instance_name:
          type: string
        device_authorization_endpoint:
          type: string
        end_session_endpoint:
          type: object
        frontchannel_logout_supported:
          type: boolean
        http_logout_supported:
          type: boolean
        id_token_signing_alg_values_supported:
          type: array
          items:
            type: string
        issuer:
          type: string
        jwks_uri:
          type: string
        rbac_url:
          type: object
        request_uri_parameter_supported:
          type: boolean
        response_modes_supported:
          type: array
          items:
            type: string
        response_types_supported:
          type: array
          items:
            type: string
        scopes_supported:
          type: array
          items:
            type: string
        subject_types_supported:
          type: array
          items:
            type: string
        tenant_region_scope:
          type: object
        token_endpoint:
          type: string
        token_endpoint_auth_methods_supported:
          type: array
          items:
            type: string
        userinfo_endpoint:
          type: string
      example:
        authorization_endpoint: 'https://ident.provide.services/api/v1/oauth/authorize'
        claims_supported:
          - acr
          - aud
          - email
          - exp
          - iat
          - iss
          - nats
          - nonce
          - nbf
          - prvd
          - sub
        cloud_instance_name: provide.services
        device_authorization_endpoint: 'https://ident.provide.services/api/v1/oauth/devicecode'
        end_session_endpoint: null
        frontchannel_logout_supported: false
        http_logout_supported: false
        id_token_signing_alg_values_supported:
          - EdDSA
          - RS256
        issuer: 'https://ident.provide.services'
        jwks_uri: 'https://ident.provide.services/.well-known/keys'
        rbac_url: null
        request_uri_parameter_supported: false
        response_modes_supported:
          - query
          - fragment
          - form_post
        response_types_supported:
          - code
          - id_token
          - code id_token
          - id_token token
        scopes_supported:
          - email
          - offline_access
          - openid
          - profile
        subject_types_supported:
          - pairwise
        tenant_region_scope: null
        token_endpoint: 'https://ident.provide.services/api/v1/tokens'
        token_endpoint_auth_methods_supported:
          - client_secret_post
          - private_key_jwt
          - client_secret_basic
        userinfo_endpoint: 'https://ident.provide.services/api/v1/userinfo'
    Workgroup:
      description: |-
        A `Workgroup` represents a logical collection of resourcess provisioned within the baseline containerized microservices architecture. An `Workgroup` is immutably configured upon initialization with support for a primary 'Network'.
        Access to programmatically manage resources associated with an `Workgroup` is provided via REST API, to which ACL-based authorization is managed using generic permissions.
      type: object
      x-examples:
        Demo Workgroup:
          id: bdf94fc0-63ad-4ee9-ac75-7eb63365d0f6
          created_at: '2021-05-21T12:36:52.977255Z'
          network_id: 07102258-5e49-480e-86af-6d0c3260827d
          user_id: 7c8fe6f1-38c3-4da1-b4b7-7591c6d0ca7c
          name: Demo Workgroup
          description: Workgroup intended for demonstration purposes
          type: baseline
          config:
            baselined: true
            webhook_secret: 1dfd34519a06420d8a6ed18afdffe932
          hidden: false
      title: ''
      properties:
        id:
          type: string
          minLength: 1
          description: Identifier for the `Workgroup`. Expressed as a UUID as specified by RFC4122.
          format: uuid
          example: bdf94fc0-63ad-4ee9-ac75-7eb63365d0f6
          maxLength: 36
          pattern: '[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}'
          readOnly: true
        created_at:
          type: string
          minLength: 1
          format: date-time
          example: '2021-05-21T12:36:52.977255Z'
          description: Date and time of record creation. Expressed as a Unix timestamp
          readOnly: true
        network_id:
          type: string
          minLength: 1
          format: uuid
          example: 07102258-5e49-480e-86af-6d0c3260827d
          maxLength: 36
          pattern: '[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}'
          description: Identifier for the host `Network` of the `Workgroup`. Expressed as a UUID as specified by RFC4122.
        user_id:
          type: string
          minLength: 1
          format: uuid
          example: 7c8fe6f1-38c3-4da1-b4b7-7591c6d0ca7c
          maxLength: 36
          description: Identifier for the `User` that created the `Workgroup`. Expressed as a UUID as specifed by RFC4122
        name:
          type: string
          minLength: 1
          description: User-defined name of the `Workgroup`
        description:
          type: string
          example: Sample workgroup description
          description: User-defined `Workgroup` descriptor
        type:
          type: string
          minLength: 1
          example: baseline
          default: baseline
          description: 'Designates `Workgroup` `type`. In a baseline `Workgroup`, will always be `baseline`'
        config:
          type: object
          description: Configuration object intended for use by integrated services.
          properties:
            baselined:
              type: boolean
            webhook_secret:
              type: string
              minLength: 1
            network_id:
              type: string
        hidden:
          type: boolean
          description: 'When `True`, the `Workgroup` is hidden from public searches'
      required:
        - id
        - created_at
        - network_id
        - user_id
        - type
    CreateWalletRequest:
      title: Create wallet request
      required:
        - purpose
      type: object
      properties:
        purpose:
          type: integer
          description: 'specification to be used by the HD node subtree; set to 44 for 44'' (i.e., 0x8000002C following the BIP43 recommendation)'
          format: int32
      example:
        purpose: 44
    ListWalletAccount:
      title: List wallet account
      required:
        - address
        - hd_derivation_path
        - private_key
        - public_key
      type: object
      properties:
        address:
          type: string
        hd_derivation_path:
          type: string
        private_key:
          type: string
          nullable: true
        public_key:
          type: string
          nullable: true
      example:
        address: 4.559332111931215e+47
        hd_derivation_path: m/44'/60'/0'/0/0'
    GetTransactionDetails:
      title: Get transaction details
      required:
        - account_id
        - block
        - block_timestamp
        - created_at
        - data
        - description
        - finalized_at
        - hash
        - id
        - network_id
        - ref
        - status
        - to
        - traces
        - user_id
        - value
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
        network_id:
          type: string
        user_id:
          type: string
        account_id:
          type: string
        to:
          type: string
        value:
          type: integer
          format: int32
        data:
          type: string
          nullable: true
        hash:
          type: string
        status:
          type: string
        ref:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        traces:
          $ref: '#/components/schemas/Traces'
        block:
          type: integer
          format: int32
        block_timestamp:
          type: string
        finalized_at:
          type: string
      example:
        id: e8b83f1b-8316-4899-a14a-0b17beb7a898
        created_at: '2021-03-11T21:11:28.295+0000'
        network_id: 66d44f30-9092-4182-a3c4-bc02736d6ae5
        user_id: 7c8fe6f1-38c3-4da1-b4b7-7591c6d0ca7c
        account_id: 8a1f4492-9a73-4e3d-bafe-6a3794b1320e
        to: 7c8fe6f1-38c3-4da1-b4b7-7591c6d0ca7c
        value: 0
        hash: 698465416514684984piouhygiuytfruytdcghbkjhbvjyhdc
        status: success
        traces: {}
        block: '9818685'
        block_timestamp: '2021-03-11T21:11:35.000+0000'
        finalized_at: '2021-03-11T21:12:06.354+0000'
    Traces:
      title: Traces
      required:
        - result
      type: object
      properties:
        result:
          type: string
          nullable: true
      example: {}
    User:
      title: User
      type: object
      required:
        - id
        - created_at
        - name
        - first_name
        - last_name
        - email
        - permissions
        - privacy_policy_agreed_at
        - terms_of_service_agreed_at
      properties:
        id:
          type: string
          description: Identifier for the reference `User`. Expressed as a UUID as specified by RFC4122
          example: 7r19e831-43fd-237e-8b43-12af828ba3e3
        created_at:
          type: string
          pattern: date-time
          description: Date and time of `User` creation
          example: '2021-01-27T03:19:33.349740295Z'
        name:
          type: string
          description: Full name of `User`
          example: Joe User
        first_name:
          type: string
          description: First name of `User`
          example: Joe
        last_name:
          type: string
          description: Last name of `User`
          example: User
        email:
          type: string
          description: Email address for `User`
          example: joeusr@baseline.local
        permissions:
          type: integer
          description: Authorized privileges for `User`
          example: '415'
        privacy_policy_agreed_at:
          type: string
          pattern: date-time
          description: Date and time of acceptance of the privacy policy
          example: '2021-01-27T03:19:33.349740295Z'
        terms_of_service_agreed_at:
          type: string
          pattern: date-time
          description: Date and time of acceptance of the terms of service
          example: '2021-01-27T03:19:33.349740295Z'
      example:
        id: 7r19e831-43fd-237e-8b43-12af828ba3e3
        created_at: '2021-01-27T03:19:33.349740295Z'
        name: Joe User
        first_name: Joe
        last_name: User
        email: joeusr@baseline.local
        permissions: '415'
        privacy_policy_agreed_at: '2021-01-27T03:19:33.349740295Z'
        terms_of_service_agreed_at: '2021-01-27T03:19:33.349740295Z'
    CreateTransactionRequest:
      title: Create transaction request
      required:
        - account_id
        - key_id
        - network_id
        - to
        - value
        - wallet_id
      type: object
      properties:
        network_id:
          type: string
          description: id of the 'Network' on which the Transaction will be broadcast
        key_id:
          type: string
          format: uuid
          description: UUID of the Vault Key which will be used to sign the `Transaction`; required in the absence of a `signer`. UUID as specified by RFC4122
        to:
          type: string
          description: 'public network address of the recipient of the Transaction, if applicable'
        value:
          type: integer
          format: int32d
          description: 'total amount of value, represented in the smallest standard denomination of native currency for the target Network (i.e., wei), to be transferred by the sender to the recipient '
        account_id:
          type: string
          description: ID of `Account` to be used for `Transaction` creation
        wallet_id:
          type: string
          description: ID of `Wallet` to be used to sign `Transaction`
      example:
        network_id: '{{network_id}}'
        key_id: '{{key_id}}'
        to: '{{user_id}}'
        value: 0
        account_id: '{{account_id}}'
    CreateTransaction:
      title: Create transaction
      required:
        - key_id
        - network_id
        - to
        - value
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
        network_id:
          type: string
        user_id:
          type: string
        account_id:
          type: string
        to:
          type: string
        value:
          type: integer
          format: int32
        data:
          type: string
          nullable: true
        hash:
          type: string
        status:
          type: string
        ref:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        block:
          type: string
          nullable: true
        broadcast_at:
          type: string
      example:
        id: 10c6e92d-56f8-4af6-959f-a30286fc166a
        created_at: '2021-04-16T15:20:00.285Z'
        network_id: 66d44f30-9092-4182-a3c4-bc02736d6ae5
        user_id: 7c8fe6f1-38c3-4da1-b4b7-7591c6d0ca7c
        account_id: 8a1f4492-9a73-4e3d-bafe-6a3794b1320e
        to: 7c8fe6f1-38c3-4da1-b4b7-7591c6d0ca7c
        value: 0
        hash: 698465416514684984piouhygiuytfruytdcghbkjhbvjyhdc
        status: pending
        broadcast_at: '2021-04-16T15:20:00.537Z'
    ListContracts:
      title: List contracts
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
        workgroup_id:
          type: string
        organization_id:
          type: string
          nullable: true
        network_id:
          type: string
        contract_id:
          type: string
          nullable: true
        transaction_id:
          type: string
          nullable: true
        name:
          type: string
        address:
          type: string
        type:
          type: string
          nullable: true
        accessed_at:
          type: string
          nullable: true
        pubsub_prefix:
          type: string
      example:
        id: 84a91108-70db-43c5-9f2f-e1655b9e0b03
        created_at: '2021-02-27T14:26:06.864Z'
        workgroup_id: dc767890-0bbc-4c1d-bc04-f5842330018f
        network_id: 07102258-5e49-480e-86af-6d0c3260827d
        transaction_id: 4c388cca-f11c-4818-96a0-e8ad0b30553d
        name: Shuttle
        address: 0x
        type: registry
        accessed_at: '2021-02-28T00:41:44.506+0000'
        pubsub_prefix: 57478604c134ef20b94dff84e52c0fd562ddae56cd50431339766819a7523d09
    DeployContractRequest:
      title: Deploy contract request
      required:
        - address
        - name
        - network_id
        - params
        - workgroup_id
      type: object
      properties:
        workgroup_id:
          type: string
          description: ID of target `Workgroup`
        network_id:
          type: string
          description: ID of target `Network`
        name:
          type: string
          description: Name of `Contract` to be created
        address:
          type: string
          description: Address
        params:
          $ref: '#/components/schemas/Params'
      example:
        workgroup_id: dc767890-0bbc-4c1d-bc04-f5842330018f
        network_id: 66d44f30-9092-4182-a3c4-bc02736d6ae5
        name: Ekho
        address: 0x
        params:
          account_id: 30ff7e74-b870-449e-b41d-e508487f7faf
          compiled_artifact:
            contractName: Ekho
            abi:
              - anonymous: false
                inputs:
                  - indexed: false
                    internalType: bytes
                    name: message
                    type: bytes
                name: Ekho
                type: event
              - inputs:
                  - internalType: bytes
                    name: message
                    type: bytes
                name: broadcast
                outputs: []
                stateMutability: nonpayable
                type: function
            bytecode: Infinity
            source: |
              contract Ekho {
                  event Ekho(bytes message);
                  function broadcast(bytes memory message) public {
                      emit Ekho(message);
                  }
              }
    Params:
      title: Params
      required:
        - account_id
        - compiled_artifact
      type: object
      properties:
        account_id:
          type: string
          description: ID of target `Account`
        compiled_artifact:
          $ref: '#/components/schemas/CompiledArtifact'
      example:
        account_id: df83bcbb-ff5b-4c4c-b1f5-8ca6a61fe460
        Compiled_Artifact:
          contractName: Ekho
          abi:
            - anonymous: false
              inputs:
                - indexed: false
                  internalType: bytes
                  name: message
                  type: bytes
              name: Ekho
              type: event
            - inputs:
                - internalType: bytes
                  name: message
                  type: bytes
              name: broadcast
              outputs: []
              stateMutability: nonpayable
              type: function
          bytecode: Infinity
          source: |
            contract Ekho {
                event Ekho(bytes message);
                function broadcast(bytes memory message) public {
                    emit Ekho(message);
                }
            }
    CompiledArtifact:
      title: Compiled artifact
      required:
        - abi
        - bytecode
        - contractName
        - source
      type: object
      properties:
        contractName:
          type: string
        Abi:
          type: array
          items: {}
        bytecode:
          type: string
        source:
          type: string
      example:
        contractName: Ekho
        abi:
          - anonymous: false
            inputs:
              - indexed: false
                internalType: bytes
                name: message
                type: bytes
            name: Ekho
            type: event
          - inputs:
              - internalType: bytes
                name: message
                type: bytes
            name: broadcast
            outputs: []
            stateMutability: nonpayable
            type: function
        bytecode: Infinity
        source: |
          contract Ekho {
              event Ekho(bytes message);
              function broadcast(bytes memory message) public {
                  emit Ekho(message);
              }
          }
    DeployContract:
      title: Deploy contract
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
        workgroup_id:
          type: string
        organization_id:
          type: string
          nullable: true
        network_id:
          type: string
        contract_id:
          type: string
          nullable: true
        transaction_id:
          type: string
          nullable: true
        name:
          type: string
        address:
          type: string
        type:
          type: string
          nullable: true
        params:
          $ref: '#/components/schemas/Params'
        accessed_at:
          type: string
          nullable: true
        pubsub_prefix:
          type: string
      example:
        id: 3956687d-154f-4a86-a6f8-43b39a8bd58e
        created_at: '2021-04-16T15:20:35.143+0000'
        workgroup_id: dc767890-0bbc-4c1d-bc04-f5842330018f
        network_id: 66d44f30-9092-4182-a3c4-bc02736d6ae5
        name: Ekho
        address: 0x
        params:
          account_id: 8a1f4492-9a73-4e3d-bafe-6a3794b1320e
          compiled_artifact:
            contractName: Ekho
            abi:
              - anonymous: false
                inputs:
                  - indexed: false
                    internalType: bytes
                    name: message
                    type: bytes
                name: Ekho
                type: event
              - inputs:
                  - internalType: bytes
                    name: message
                    type: bytes
                name: broadcast
                outputs: []
                stateMutability: nonpayable
                type: function
            bytecode: Infinity
            source: |
              contract Ekho {
                  event Ekho(bytes message);
                  function broadcast(bytes memory message) public {
                      emit Ekho(message);
                  }
              }
        pubsub_prefix: 57478604c134ef20b94dff84e52c0fd562ddae56cd50431339766819a7523d09
    BaselineDeployRegistryContractRequest:
      title: Baseline deploy registry contract Request
      required:
        - address
        - name
        - network_id
        - params
        - workgroup_id
      type: object
      properties:
        workgroup_id:
          type: string
          description: ID of target `Workgroup`
        network_id:
          type: string
          description: ID of target `Network`
        name:
          type: string
          description: Name of registry contract
        address:
          type: string
          description: 0x
        params: {}
    GeneratedObject:
      title: GeneratedObject
      required:
        - .auxdata
        - .code
      type: object
      properties:
        .auxdata:
          type: string
        .code:
          type: array
          items: {}
      example:
        .auxdata: a365627a7a72305820ac2a168cd77b6f5d1a23b9678e61ccc3319440560256ba94d7d12c9b835ef8ae6c6578706572696d656e74616cf564736f6c63430005090040
    GetContractDetail:
      title: Get contract detail
      required:
        - accessed_at
        - address
        - contract_id
        - created_at
        - id
        - name
        - network_id
        - organization_id
        - params
        - pubsub_prefix
        - transaction_id
        - type
        - workgroup_id
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
        workgroup_id:
          type: string
        organization_id:
          type: string
          nullable: true
        network_id:
          type: string
        contract_id:
          type: string
          nullable: true
        transaction_id:
          type: string
        name:
          type: string
        address:
          type: string
        type:
          type: string
          nullable: true
        params:
          $ref: '#/components/schemas/Params'
        accessed_at:
          type: string
        pubsub_prefix:
          type: string
      example:
        id: b1843afa-2c7d-42d6-a4e0-8670e9af8dde
        created_at: '2021-03-12T03:46:48.025+0000'
        workgroup_id: dc767890-0bbc-4c1d-bc04-f5842330018f
        network_id: 66d44f30-9092-4182-a3c4-bc02736d6ae5
        transaction_id: 4eb74b2d-04d7-4079-96ac-390d28660672
        name: Ekho
        address: ''
        params:
          account_id: 8a1f4492-9a73-4e3d-bafe-6a3794b1320e
          compiled_artifact:
            contractName: Ekho
            abi:
              - anonymous: false
                inputs:
                  - indexed: false
                    internalType: bytes
                    name: message
                    type: bytes
                name: Ekho
                type: event
              - inputs:
                  - internalType: bytes
                    name: message
                    type: bytes
                name: broadcast
                outputs: []
                stateMutability: nonpayable
                type: function
            bytecode: Infinity
            source: |
              contract Ekho {
                  event Ekho(bytes message);
                  function broadcast(bytes memory message) public {
                      emit Ekho(message);
                  }
              }
        accessed_at: '2021-03-12T05:28:24.539+0000'
        pubsub_prefix: 377b5d1c6403a07ae083767a824140b3219246d1e377d3ad7dd63d84ed4fd3ac
    ExecuteContractRequest:
      title: Execute contract request
      required:
        - account_id
        - method
        - params
        - value
      type: object
      properties:
        method:
          type: string
        params:
          type: array
          items:
            type: string
        value:
          type: integer
          format: int32
        account_id:
          type: string
          description: ID of `Account` funding `Contract` execution
      example:
        method: broadcast
        params:
          - hello world
        value: 0
        account_id: 30ff7e74-b870-449e-b41d-e508487f7faf"
    ExecuteContract:
      title: Execute contract
      required:
        - confidence
        - ref
      type: object
      properties:
        confidence:
          type: string
          nullable: true
        ref:
          type: string
      example:
        ref: 6d481b8c-6354-4c2f-8c9c-26563b3e5db7
    CreateBaselineBusinessObjectRequest:
      title: CreateBaselineBusinessObjectRequest
      required:
        - id
        - type
      type: object
      properties:
        type:
          type: string
          description: Type of business object being created
        id:
          type: string
      example:
        type: purchase_order
        id: '4500002427'
        payload:
          hello: world
    UpdateBaselinedBusinessObjectRequest:
      title: UpdateBaselinedBusinessObjectRequest
      required:
        - id
        - payload
        - type
      type: object
      properties:
        type:
          type: string
          description: New type for target business object
        id:
          type: string
          description: ID of target business object to be updated
        payload: {}
      example:
        type: purchase_order
        id: '4500002427'
    CreateAsymmetricKeyRequest:
      title: Create Asymmetric Key Request
      required:
        - description
        - name
        - spec
        - type
        - usage
      type: object
      properties:
        type:
          type: string
          description: Type of `Key` being created
          enum:
            - asymmetric
        usage:
          type: string
          description: Purpose for `Key` being created
          enum:
            - sign/verify
        spec:
          type: string
          description: Specification to be used for `Key` creation
          enum:
            - C25519
            - BabyJubjub
            - Ed25519
            - RSA-2048
            - RSA-3072
            - RSA-4096
            - secp256k1
        name:
          type: string
          description: Name of `Key` to be generated
        description:
          type: string
          description: Description of `Key` to be generated
      example:
        type: asymmetric
        usage: sign/verify
        spec: C25519
        name: 'c25519 key #1'
        description: c25519 key
    CreateAsymmetricKey:
      title: Create Asymmetric Key
      required:
        - created_at
        - description
        - id
        - name
        - public_key
        - spec
        - type
        - usage
        - vault_id
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
        vault_id:
          type: string
        type:
          type: string
          enum:
            - Asymmetric
        usage:
          type: string
        spec:
          type: string
          enum:
            - C25519
            - BabyJubjub
            - Ed25519
            - RSA-2048
            - RSA-3072
            - RSA-4096
            - secp256k1
        name:
          type: string
        description:
          type: string
        public_key:
          type: string
      example:
        id: a54effe3-ee74-4f3f-902e-b8825e1d571c
        created_at: '2021-04-17T20:55:48.341+0000'
        vault_id: a'e3c07d9-8a41-4cd3-92c0-e6358cbd516c'
        type: asymmetric
        usage: sign/verify
        spec: C25519
        name: 'c25519 key #1'
        description: c25519 key
        public_key: ''
    CreateSymmetricKeyRequest:
      title: Create Symmetric Key Request
      required:
        - description
        - name
        - spec
        - type
        - usage
      type: object
      properties:
        type:
          type: string
          description: Type of Key being generated
          enum:
            - symmetric
        usage:
          type: string
          description: Purpose of `Key` being generated
          enum:
            - Encrypt/decrypt
        spec:
          type: string
          description: Specification to be used for `Key` generation
          enum:
            - AES-256-GCM
            - ChaCha20
        name:
          type: string
          description: Name of `Key` being generated
        description:
          type: string
          description: Description of `Key` being generated
      example:
        type: symmetric
        usage: encrypt/decrypt
        spec: ChaCha20
        name: 'ChaCha20 key #1'
    CreateSymmetricKey:
      title: Create Symmetric Key
      required:
        - created_at
        - description
        - id
        - name
        - public_key
        - spec
        - type
        - usage
        - vault_id
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
        vault_id:
          type: string
        type:
          type: string
        usage:
          type: string
        spec:
          type: string
        name:
          type: string
        description:
          type: string
        public_key:
          type: string
      example:
        id: 6e235b0d-654f-472a-ac94-135d7c745345
        created_at: '2021-04-17T20:55:54.029+0000'
        vault_id: ae3c07d9-8a41-4cd3-92c0-e6358cbd516c
        type: asymmetric
        usage: sign/verify
        spec: babyJubJub
        name: 'babyjubjub key #1'
        description: babyjubjub key
        public_key: ''
    DeriveaKeyRequest:
      title: Derive a Key Request
      required:
        - context
        - description
        - name
        - nonce
      type: object
      properties:
        nonce:
          type: integer
          format: int32
        context:
          type: string
        name:
          type: string
          description: Name of `Key` to be derived
        description:
          type: string
          description: Description of `Key` to be derived
      example:
        nonce: 1
        context: channel-6852386c-8a3d-41c6-aa0e-766a31a8faaf
        name: private chat
        description: this is a secure channel
    DeriveaKey:
      title: Derive a key
      required:
        - created_at
        - description
        - id
        - name
        - spec
        - type
        - usage
        - vault_id
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
        vault_id:
          type: string
        type:
          type: string
        usage:
          type: string
        spec:
          type: string
        name:
          type: string
        description:
          type: string
      example:
        id: 02e81595-ef57-4e71-8e27-1c8b2dfdefbf
        created_at: '2021-04-17T21:07:16.098+0000'
        vault_id: ae3c07d9-8a41-4cd3-92c0-e6358cbd516c
        type: symmetric
        usage: encrypt/decrypt
        spec: ChaCha20
        name: private chat
        description: this is a secure channel
    DeleteaKeyRequest:
      title: DeleteakeyRequest
      required:
        - context
        - description
        - name
        - nonce
      type: object
      properties:
        nonce:
          type: integer
          format: int32
        context:
          type: string
        name:
          type: string
        description:
          type: string
      example:
        nonce: 1
        context: channel-6852386c-8a3d-41c6-aa0e-766a31a8faaf
        name: private chat
        description: this is a secure channel
    Listkey:
      title: Listkey
      required:
        - created_at
        - description
        - id
        - name
        - spec
        - type
        - usage
        - vault_id
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
        vault_id:
          type: string
        type:
          type: string
        usage:
          type: string
        spec:
          type: string
        name:
          type: string
        description:
          type: string
        public_key:
          type: string
      example:
        id: 4133ad1e-05ee-400a-9def-f1b99912976b
        created_at: '2021-04-17T20:30:50.762+0000'
        vault_id: ae3c07d9-8a41-4cd3-92c0-e6358cbd516c
        type: symmetric
        usage: encrypt/decrypt
        spec: AES-256-GCM
        name: master0
        description: AES-256-GCM master key for vault ae3c07d9-8a41-4cd3-92c0-e6358cbd516c
    StoreSecretRequest:
      title: Store secret request
      required:
        - description
        - name
        - type
        - value
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        description:
          type: string
        value:
          type: string
      example:
        name: 'secret #1'
        type: sample secret
        description: this secret is being stored for demonstration purposes
        value: 'mysecret :D'
    StoreSecret:
      title: Storesecret
      required:
        - created_at
        - description
        - id
        - name
        - type
        - vault_id
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
        vault_id:
          type: string
        type:
          type: string
        name:
          type: string
        description:
          type: string
      example:
        id: 130efb67-e742-4f10-8270-8609d030baec
        created_at: '2021-04-17T20:35:34.062+0000'
        vault_id: ae3c07d9-8a41-4cd3-92c0-e6358cbd516c
        type: sample secret
        name: 'secret #1'
        description: this secret is being stored for demonstration purposes
    RetrieveSecret:
      title: Retrievesecret
      required:
        - created_at
        - description
        - id
        - name
        - type
        - value
        - vault_id
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
        vault_id:
          type: string
        type:
          type: string
        name:
          type: string
        description:
          type: string
        value:
          type: string
      example:
        id: 5d86a503-dcc3-48ee-9c15-9943f211b0d1
        created_at: '2021-04-17T20:54:38.468+0000'
        vault_id: ae3c07d9-8a41-4cd3-92c0-e6358cbd516c
        type: sample secret
        name: 'secret #1'
        description: this secret is being stored for demonstration purposes
        value: 'mysecret :D'
    DeleteSecretRequest:
      title: Delete a Secret Request
      required:
        - context
        - description
        - name
        - nonce
      type: object
      properties:
        nonce:
          type: integer
          format: int32
        context:
          type: string
        name:
          type: string
        description:
          type: string
      example:
        nonce: 1
        context: channel-6852386c-8a3d-41c6-aa0e-766a31a8faaf
        name: private chat
        description: this is a secure channe
    CreateVaultRequest:
      title: Create a vault request
      required:
        - description
        - name
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      example:
        name: Test vault
        description: Organizational keystore
    CreateVault:
      title: CreateVault
      required:
        - created_at
        - description
        - id
        - name
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
        name:
          type: string
        description:
          type: string
      example:
        id: 5933aef0-d48a-4675-99a0-8727182fbc14
        created_at: '2021-04-17T20:42:40.391682519Z'
        name: Test Vault
        description: Organizational keystore
    ListVault:
      title: List Vaults
      required:
        - created_at
        - description
        - id
        - name
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
        name:
          type: string
        description:
          type: string
          nullable: true
      example:
        id: db03b170-7802-4687-b1b9-4459f49f6df6
        created_at: '2020-12-18T04:29:24.909+0000'
        name: Vault one
        description: Organizational keystore
    ListWellKnownKeys:
      title: List JSON Web Key Sets (JWKs)
      type: object
      example:
        kid: 'c5:eb:8d:59:44:38:63:06:c9:d3:e4:97:08:fb:68:9c'
        'n': '995527063618956193410833036962507246986474398054602179908260487445806246489215766039251752652683534248392227323379449531373094174748653054997706465668689972252213093587018180990218764975713772974100211316813863025129179630019623482456703746731298216105196239902672165546333004057492239784978826286556220816776336241042696753088894672303989781706643733233579846968753349402992192452275172979617296256431304053528963070154587755597334718471566532697695566806848739816890462413410326248045976990042651171835110004317895064969114765347902086739148556954319383964003317643357488047800335770372072590234276602697951534723513814120780494254368686116204741180163099781052651805841038832515887268451518717672650541960189952548208271063651390926536783230127645827697776323106258247121628807721231425504345976051589179188919820510476741228874102006646132604055010539746291533048142740994895058566847763900593989114102754149269150841200709200458437074129362211966398371438300510481258132560736028943646699639829561555724431474507308017460343637655844991892817988961745641951250027197531503911248482778035085865533953601104790476037915508823689020619850341247576271568925023930116394277127637893466936882893442420321634189068402675796649097631203'
        e: 10001
        fingerprint: 'e6:f7:d5:24:e2:59:06:2b:bc:a2:8c:35:9d:ca:0a:87'
        public_key: .inf
      x-examples:
        Well-known keys:
          kid: 'c5:eb:8d:59:44:38:63:06:c9:d3:e4:97:08:fb:68:9c'
          'n': '995527063618956193410833036962507246986474398054602179908260487445806246489215766039251752652683534248392227323379449531373094174748653054997706465668689972252213093587018180990218764975713772974100211316813863025129179630019623482456703746731298216105196239902672165546333004057492239784978826286556220816776336241042696753088894672303989781706643733233579846968753349402992192452275172979617296256431304053528963070154587755597334718471566532697695566806848739816890462413410326248045976990042651171835110004317895064969114765347902086739148556954319383964003317643357488047800335770372072590234276602697951534723513814120780494254368686116204741180163099781052651805841038832515887268451518717672650541960189952548208271063651390926536783230127645827697776323106258247121628807721231425504345976051589179188919820510476741228874102006646132604055010539746291533048142740994895058566847763900593989114102754149269150841200709200458437074129362211966398371438300510481258132560736028943646699639829561555724431474507308017460343637655844991892817988961745641951250027197531503911248482778035085865533953601104790476037915508823689020619850341247576271568925023930116394277127637893466936882893442420321634189068402675796649097631203'
          e: 10001
          fingerprint: 'e6:f7:d5:24:e2:59:06:2b:bc:a2:8c:35:9d:ca:0a:87'
          public_key: |
            -----BEGIN PUBLIC KEY-----
            MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA9AXkmbTnpXP5FhWEseGx
            Z6xJV0ge824eZ597IMYjk7/YLqFz2sBha6B59/PD1iO6ZPFUbeSTJcVetsdGUgj5
            aqsWOqQLNdhNkHCtXKs8h/2YwbB5AWSC5Kwbh2v6mAH//m2Tg/TKRvzXxqu3n3Wq
            jUzKOs6fco4LHTmFWbIyF1R6Xz6+9bSut0+kyXVXk2un0c+CkLSAV/khX/lLV8X1
            VjY8IMeLcys+U0lbcPs1I1ADct0YUFhmyVBeOQ/AEY8QbktepYH2YxtRBZ8xQBo3
            LtJfsKhFmeJEE3TKMPt/a4B4jeYGq5weQ9dFbriT/hgJOH2QWpnz3hBdo2kEZCKy
            S/HrPdiyoUl0ID6kD2ewjo6eqNVnW0F1G5lSGyWB3bpP7N1cbH0hqZG1DTHB8t5s
            2ZDnEKGqOCAZYJecumnsCd4W9JW5WB2HdyIsViEt22ItaEU0UBNCylykjHyQB2Mm
            NL2KpUhyJisdUMRvjOLZ4Lt4h2we6wEd4Euczi638IcNa3PSXjOXWzQ4872DhTpn
            URjLCniUvVUp1h/MyuhbDu2b7m2n/UgVDdFGGKd2/l+q7V/hekzhWPhyIfHxcolS
            ya+2uVuTkg1bjtrrq/JF5xEDqDVuBLMEEa7WmYjmKQHLRAHNfZrTwKzdufqUJpFq
            COW4VfKtvWpic+pvrXRlFeMCAwEAAQ==
            -----END PUBLIC KEY-----
      properties:
        kid:
          type: string
          description: The unique identifier for the key.
        'n':
          type: string
          description: The modulus for the RSA public key.
        e:
          type: string
          description: The exponent for the RSA public key.
        fingerprint:
          type: string
        public_key:
          type: string
      required:
        - kid
        - 'n'
        - e
        - fingerprint
        - public_key
    CreateSealorUnsealkey:
      title: Create seal/unseal key
      required:
        - key
        - validation_hash
      type: object
      properties:
        key:
          type: string
        validation_hash:
          type: string
      example:
        key: quantum mirror summer general keep west promote satisfy limit butter mother oyster lazy whip earn spot ticket protect mean play script peace parent intact
        validation_hash: 7.513656111758505e+76
    UnsealVaultRequest:
      title: Unseal vault request
      required:
        - key
      type: object
      properties:
        key:
          type: string
      example:
        key: quantum mirror summer general keep west promote satisfy limit butter mother oyster lazy whip earn spot ticket protect mean play script peace parent intact
      oneOf:
        - $ref: '#/components/schemas/CreateAsymmetricKeyRequest'
        - $ref: '#/components/schemas/CreateSymmetricKeyRequest'
    inline_response_201:
      oneOf:
        - $ref: '#/components/schemas/CreateAsymmetricKey'
        - $ref: '#/components/schemas/CreateSymmetricKey'
    CreateCircuitRequest:
      title: CreateCircuitRequest
      required:
        - curve
        - identified
        - name
        - provider
        - proving_scheme
      type: object
      properties:
        identifier:
          type: string
        proving_scheme:
          type: string
        curve:
          type: string
        provider:
          type: string
        name:
          type: string
      example:
        identified: cubic
        proving_scheme: groth16
        curve: BN256
        provider: gnark
        name: my 1337 circuit
    ProveRequest:
      title: ProveRequest
      required:
        - curve
        - identifier
        - name
        - provider
        - proving_scheme
      type: object
      properties:
        identifier:
          type: string
        proving_scheme:
          type: string
        curve:
          type: string
        provider:
          type: string
        name:
          type: string
      example:
        identifier: cubic
        proving_scheme: groth16
        curve: BN256
        provider: gnark
        name: my 1337 circuit
    VerifyRequest:
      title: VerifyRequest
      required:
        - proof
        - 'witness:'
      type: object
      properties:
        'witness:':
          $ref: '#/components/schemas/Witness'
        proof:
          type: string
          description: The hex-formatted proof to verify
        store:
          type: boolean
          description: 'when true, the proof hash is written to the configured circuit store'
      example:
        'witness:':
          X: '3'
          'Y': '35'
        proof: 88b8d340795f4258c1f2c0ed8478b44859c90472af9ccdc5c54b02c85bcd879d9ddf3a3fb7c6926ea247c0b1c411abe2f5ba9c8deba60ab476428272767a761d1e14e343208024326429e361ebbc4c11daf5f16dbb7f7f4679cf85b17b59b1bdaa379a82ddab4dcbb7cd2bc32cdebadc6825c72d5f8e624f6d0f6b07906a8248
    Witness:
      title: Witness
      required:
        - X
        - 'Y'
      type: object
      properties:
        X:
          type: string
        'Y':
          type: string
      description: Public and private inputs used to generate the proof
      example:
        X: '3'
        'Y': '35'
  responses:
    NoContent:
      description: The request was successful but did not return a response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: 'The request required an API Authorization header, or one was provided which could not be authenticated. Please verify that your credentials are correct and try again.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: The supplied API Authorization header does not have permission to access the requested resource. Please verify that you have sufficient permissions and try again.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: The request resulted in an internal error during processing.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServiceUnavailable:
      description: The request cannot be fulfiled due to temporary unavailablity of a backend service
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  parameters:
    page:
      name: page
      in: query
      description: Limits resulting response to the page number specified
      required: false
      style: form
      explode: true
      schema:
        type: integer
    resultsPerPage:
      name: rpp
      in: query
      description: Sets the number of results included per page
      required: false
      style: form
      explode: true
      schema:
        type: integer
        example: 25
      allowEmptyValue: true
    public:
      name: public
      in: query
      description: When `TRUE` limits results to non-private records
      required: false
      style: form
      explode: true
      schema:
        type: boolean
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'The presence of a `bearer` API token is required to authorize most Baseline API calls. A `bearer` API token is an encoded JWT which contains a subject claim (`sub`) which references an authorized entity (i.e., the `User`, `Application` or `Organization`). The authorized entity uses a signed `bearer` authorization Token to access one or more resources for which the Token was authorized. Unless otherwise noted, all API requests must include a header such as `Authorization: bearer <jwt>`'
    OAuth2:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'https://ident.provide.services/api/v1/oauth/authorize'
          scopes:
            email: email and password
            offline_access: access/refresh token authorization model
            profile: ''
            openid: ''
      description: |-
        OAuth2 support. In accordance with the OAuth 2.0 specification, when an entity is authorized and the requested `scope` includes `offline_access`, a refresh token is vended and returned on behalf of the caller. This refresh token is long-lived and can be used to authorize short-lived access tokens using the `refresh_token `grant type on subsequent authorization requests.

        This pattern is useful for machine-to-machine applications; a secure practice is to store the long-lived refresh token in a Vault instance (i.e., as a secret), read it into application memory during container initialization and then use it to authorize a short-lived access token. If the container remains running long enough for the access token to expire, the refresh token should once again be used to seamlessly authorize a new access token.
externalDocs:
  description: Additional information about this API can be found here
  url: 'https://docs.provide.services'
